# 使用するフォントファミリー
# CLIを使用して有効なフォント一覧を生成できます:
#
#     ghostty +list-fonts
#
# この設定は複数回繰り返して指定することで、主要フォントに目的のコードポイントが
# 存在しない場合の優先的な代替フォントを指定できます。特に多言語対応やシンボルフォント、
# その他の特殊なケースで有用です。
#
# 絵文字に関する注意点: macOSではGhosttyはデフォルトで常にApple Color Emojiを、
# Linuxではデフォルトで常にNoto Emojiを使用します。この動作を変更するには、
# ここに絵文字グリフを含むフォントファミリーを指定することで上書き可能です。
#
# 特定のスタイル（太字、斜体、太字斜体）は明示的に設定する必要はありません。
# スタイルが設定されていない場合、通常のスタイル（font-family）がスタイルバリエーションとして
# 検索されます。スタイルバリエーションが見つからない場合、Ghosttyは通常スタイルを使用します。
# これにより、単にスタイル（例：太字）を得るために別のフォントファミリーに切り替わるのを防ぎます。
# これはスタイルを明示的にフォントファミリーとして指定した場合も同様です。例えば、
# `font-family-bold = FooBar`と設定した場合、"FooBar"が見つからない場合、Ghosttyは
# `font-family`に設定されているフォントを太字スタイルとして使用します。
#
# 最後に、サポートされていないスタイルは合成される場合があります。
# 例えば、フォントに斜体スタイルがない場合、代替の斜体フォントが指定されていない場合、
# Ghosttyは通常スタイルに傾斜を適用することで斜体スタイルを合成します。これらの合成スタイルを
# 無効化したい場合は、後述の`font-style`設定を使用できます。
#
# スタイルを完全に無効化するには、`font-style`設定群を使用します。詳細は`font-style`の
# ドキュメントを参照してください。
#
# フォールバックを追加する代わりに以前の設定値を完全に上書きしたい場合は、
# 値を`""`（空文字列）として指定することでリストをリセットし、その後に新しい値を設定します。
# 例えば:
#
#     font-family = ""
#     font-family = "My Favorite Font"
#
# これらのいずれかをCLI引数として指定すると、設定ファイルで設定された値が自動的にクリアされるため、
# 新しい値を設定する前に`--font-family=""`を指定する必要はありません。設定ファイル内でのみ
# 指定する必要があるのは、設定ファイルまたはCLIで以前に設定した値をクリアしたい場合のみです。
#
# この設定をランタイムで変更した場合の影響は新しいターミナル（新規ウィンドウ、タブなど）のみに及びます。
font-family = "Moralerspace Argon"

# 各要求された端末フォントスタイルに対して使用する名前付きフォントスタイルを指定します。
# この設定では、フォント自身が広告するフォントスタイル文字列に基づいてスタイルを検索します。
# 例えば、"Iosevka Heavy" というフォントには「Heavy」というスタイルが設定されています。
#
# これらのフィールドを使用して、特定のフォントスタイルを完全に無効化することも可能です。
# 以下の設定値を `false` に設定した場合、そのフォントスタイルは無効化されます。
# 端末上で実行中のプログラムが無効化されたフォントスタイルを要求した場合、
# 代わりに通常のフォントスタイルが使用されます。
#
# これらの設定は、対応するフォントファミリーが指定されている場合にのみ有効です。
# フォントファミリーが指定されていない場合、フォントスタイルは無効化時を除いて無視されます。
font-style = default

font-style-bold = default
font-style-italic = default
font-style-bold-italic = default

# 指定したフォントファミリーに要求されたスタイルが存在しない場合、Ghosttyがスタイルを合成するかどうかを制御します。
#
# Ghosttyは、フォントに特定のスタイルが存在しない場合、太字・斜体・太字斜体のスタイルを合成できます。
# 太字の場合、グリフの周囲に太さを変化させたアウトラインを描画することで実現します。
# 斜体の場合は、グリフに傾斜を適用することで実現します。
# 太字斜体の場合は、これらの両方の処理を適用します。
#
# 合成されたスタイルは完全なものではなく、通常はそのスタイルをネイティブに持つフォントほど美しく表示されません。
# ただし、フォントにスタイルが存在しない場合にスタイル付きテキストを提供するためには有用です。
#
# 「false」または「true」に設定することで、合成スタイルの有効/無効を完全に切り替えられます。
# 特定のスタイルのみを無効にするには、「no-bold」「no-italic」「no-bold-italic」を使用します。
# 複数のスタイルを無効にする場合は、カンマで区切って指定します（例：「no-bold,no-italic」）。
#
# 利用可能なスタイルキーは以下の通りです：`bold`、`italic`、`bold-italic`。
#
# 合成スタイルが無効に設定されている場合、要求されたスタイルが存在しない場合は通常のスタイルが使用されます。
# フォントに要求されたスタイルが存在する場合は、そのスタイルがネイティブに存在するため、そのままフォントが使用されます。
#
# 注意：よくある間違いとして、`bold`または`italic`のみを無効にし、`bold-italic`を無効にしないケースがあります。
# `bold`または`italic`のみを無効にしても、`bold-italic`スタイルに対しては無効になりません。
# `bold-italic`を完全に無効にしたい場合は、明示的に無効にする必要があります。
# `bold-italic`を部分的に無効にすることはできません。
#
# デフォルトでは、合成スタイルは有効になっています。
font-synthetic-style = bold,italic,bold-italic

# フォントフィーチャーを適用します。複数のフォントフィーチャーを有効にする場合は、
# この設定を複数繰り返すか、カンマ区切りのフィーチャー設定リストを使用してください。
#
# フィーチャー設定の構文は以下の通りです。`feat`はフィーチャー名を表します：
#
#   * フィーチャーを有効にする場合：`feat`、`+feat`、`feat on`、`feat=1`
#   * フィーチャーを無効にする場合：`-feat`、`feat off`、`feat=0`
#   * フィーチャー値を設定する場合：`feat=2`、`feat = 3`、`feat 4`
#   * フィーチャー名は引用符で囲むことも可能です（この設定はCSSの`font-feature-settings`プロパティと構文的に互換性がある必要があります）
#
# 構文は比較的緩やかですが、無効な設定はエラーとして扱われず無視されます。
#
# このフォントフィーチャーはGhosttyによってレンダリングされるすべてのフォントに適用されます。
# 今後の機能拡張により、特定のフォントフェイスを対象とする指定も可能になる予定です。
#
# プログラミング用リガチャを無効にする場合は`-calt`を使用してください。これはプログラミング用リガチャに典型的なフィーチャー名です。
# 使用しているフォントにどのようなフォントフィーチャーが存在し、それぞれがどのような機能を持つかを確認するには、[fontdrop.info](https://fontdrop.info)などのフォント検査ツールをご利用ください。
#
# ほとんどのリガチャを全般的に無効にする場合は`-calt, -liga, -dlig`を使用してください。
font-feature = "calt, liga, dlig, ordn"


# フォントサイズをポイント単位で指定します。この値は整数以外の値も設定可能で、
# 最も近い整数ピクセルサイズが自動的に選択されます。高解像度ディスプレイで
# 1pt = 2px の場合など、半ポイント単位で指定することで奇数ピクセルサイズを
# 設定することも可能です。
#
# 例: 13.5pt @ 2px/pt = 27px
#
# この設定を動作中に変更した場合、影響を受けるのは新規に作成されるターミナル
# （新規ウィンドウ、タブなど）のみです。なお、`window-inherit-font-size` 設定によっては
# 変更が反映されない場合があります。この設定が有効の場合、最初のウィンドウのみ
# が変更の影響を受けます。その後に作成されるウィンドウはすべて、前のウィンドウの
# フォントサイズを継承するためです。
#
# Linux 環境で GTK を使用している場合、フォントサイズはディスプレイ全体のスケーリング係数と
# テキスト固有のスケーリング係数の両方に基づいて調整されます。これらの係数は通常、
# デスクトップ環境（例：GNOME のディスプレイスケール設定や大きな文字設定など）で
# 管理されています。
font-size = 13

# 可変フォントにおいて、1つ以上のフォントバリエーション値を設定する再利用可能な設定について。
# 可変フォントとは、通常ファイル名が `-VF.ttf` または `-VF.otf` で終わる単一のフォントファイルで、
# ウェイトや傾斜角などの調整可能な軸を複数含むものです。すべてのフォントがバリエーションに対応しているわけではなく、
# 明示的に「可変フォント」と記載されているもののみが対象となります。
#
# この設定の形式は `id=value` で、`id` は軸の識別子です。軸識別子は常に4文字の文字列で、
# 例えば `wght` のようなものです。サポートされている軸の一覧を確認するには、
# フォントのドキュメントを参照するか、フォント検査ツールを使用してください。
#
# 無効な識別子や値は通常無視されます。例えば、フォントが100から700までのウェイトしかサポートしていない場合、
# `wght=800` を設定しても何の効果もありません（700にクランプされるわけではありません）。
# サポートされている値の詳細については、必ずフォントのドキュメントを参照してください。
#
# 一般的な軸の種類には以下があります：`wght`（ウェイト）、`slnt`（傾斜角）、`ital`（イタリック体）、
# `opsz`（光学サイズ）、`wdth`（幅）、`GRAD`（グラデーション）など。
# font-variation =

# font-variation-bold =
# font-variation-italic =
# font-variation-bold-italic =

# 特定の Unicode コードポイント 1 つまたは範囲を、指定した名前付きフォントに強制的にマッピングします。
# これは、特殊な記号をサポートしたい場合や、特定のフォントでより適切に表示できる特定のグリフを使用したい場合に便利です。
#
# 構文は `codepoint=fontname` 形式です。ここで `codepoint` は単一のコードポイントまたは範囲を指定します。コードポイントは完全な Unicode の 16 進値形式で指定する必要があり、例えば `U+ABCD` のように記述します。コードポイントの範囲は `U+ABCD-U+DEFG` の形式で指定します。同じフォントに対して複数の範囲を指定する場合は、カンマで区切って記述できます（例：`U+ABCD-U+DEFG,U+1234-U+5678=fontname`）。フォント名は `font-family` で使用するのと同じ値を指定します。
#
# この設定は複数回繰り返して記述することで、複数のコードポイントマッピングを指定できます。
#
# この設定をランタイム時に変更した場合、影響を受けるのは新しいターミナル（新規ウィンドウ、タブなど）のみです。
# font-codepoint-map =


# 可能な場合、太い線でフォントを描画します。
# これは現在macOSでのみサポートされています。
font-thicken = false

# `font-thicken` が有効時の文字の太さの強度設定
#
# 有効な値は 0 から 255 までの整数です。0 は「太さなし」を意味するのではなく、
# 利用可能な中で最も軽い太さ設定を指します。
#
# `font-thicken` が `false` に設定されている場合は効果がありません。
#
# 現在のところ、この機能は macOS でのみサポートされています。
font-thicken-strength = 255

# フォントの字形処理を複数の処理単位に分割する位置を指定します。
#
# 「処理単位」とは、連続して処理されるテキストの連続した範囲を指します。「字形処理」とは、テキストデータ（コードポイント）を可視的なグリフ（表示可能な文字）に変換する処理のことです。これは合字が形成される仕組みの一つでもあります。
# 例えば、特定のコーディングフォントが「!=」を単一のグリフとして表示する場合、「!"」と「="」が連続した処理単位として認識される必要があります。処理単位が分割されると、テキストは個別に処理されます。先ほどの例で言えば、「!"」が一つの処理単位の末尾に、「="」が次の処理単位の先頭にある場合、合字は形成されません。
#
# Ghostty は読みやすさや操作性を向上させるため、特定のポイントで処理単位を分割します。
# 例えば、Ghostty はデフォルトでカーソル位置の下にある処理単位を分割し、テキスト編集時に合字ではなく個々の文字が表示されるようにします。この設定では、この動作をカスタマイズできます。
#
# 複数のオプションを設定する場合はカンマで区切ってください。オプションの前に「no-」を接頭辞として付けると、そのオプションを無効にできます。オプションの有効化と無効化は同時に行うことができます。
#
# 利用可能なオプション:
#
#   * `cursor` - カーソル位置の下にある処理単位を分割します。
#
# 対応バージョン: 1.2.0 以降
font-shaping-break = cursor

# アルファブレンディング処理時に使用すべきカラースペースを指定します。
#
# この設定はテキストの表示品質と、透過処理が施された画像の表示に影響を与えます。
# さらに、カスタムシェーダーではこの設定されたカラースペースで色値が渡されます。
#
# macOS ではデフォルト値が `native` に設定されており、その他のプラットフォームでは
# `linear-corrected` がデフォルトとなります。
#
# 有効な値:
#
# * `native` - オペレーティングシステムのネイティブカラースペースでアルファブレンディングを実行します。
#   macOS では Display P3 カラースペース、Linux では sRGB カラースペースが使用されます。
#
# * `linear` - リニアカラースペースでアルファブレンディングを実行します。この方法では、
#   特定の色組み合わせ（例：赤/緑）を使用した際にテキストの輪郭周辺に現れる暗転現象が解消されますが、
#   同時に暗い色のテキストが通常より細く、明るい色のテキストが通常より太く表示されるようになります。
#   これは「ガンマ補正」としても知られています。
#
# * `linear-corrected` - `linear` と同様の処理を行いますが、テキストに対して補正処理を適用することで、
#   `native` とほぼ同等、あるいは完全に同一の表示結果を得つつ、暗転現象を一切生じさせないようにします。
#
# 対応バージョン: 1.1.0 以降
alpha-blending = native

# この設定ファイルでは、フォントによって決定される各種メトリクスを調整できます。
# 設定値は整数（例：1、-1など）またはパーセント値（例：20%、-15%など）で指定可能です。
# いずれの場合も、値は元の値を変更する量を表します。
#
# 例えば、値を`1`に設定すると値が1増加します（文字通り1に設定されるわけではありません）。
# `20%`に設定した場合は値が20%増加します。同様に、他の値についても同様の動作をします。
#
# これらの値に対する検証はほとんど行われていないため、誤った値（例：`-100%`）を指定すると
# ターミナルが使用不能になる可能性があります。使用時には十分注意してください。
#
# 一部の値は最小値または最大値に制限されています。このため、特定の値が無視されているように
# 見える場合があります。例えば、多くの`*-thickness`調整値は1px未満に設定できません。
#
# `adjust-cell-height`には追加の動作仕様があります：
#
#   * フォントはセル内で垂直方向に中央揃えされます。
#
#   * カーソルサイズはフォントと同じ大きさを維持しますが、
#     `adjust-cursor-height`で個別に調整することも可能です。
#
#   * パワーライン用グリフはセルの高さに合わせて調整されるため、
#     ステータスラインなどが適切に整列した状態を保ちます。
adjust-cell-width = 0%

adjust-cell-height = 0%
# セルの最下部からテキストのベースラインまでの距離をピクセル単位またはパーセントで指定します。
# 値を増やすとベースラインが上に移動し、減らすと下に移動します。
# `adjust-cell-width` の調整に関する注意事項を参照してください。
adjust-font-baseline = 0%

# アンダーラインの位置調整：セル上部からアンダーライン上部までのピクセル単位またはパーセント値による調整量
# 値を増やすとアンダーラインが下に移動し、減らすと上に移動します
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-underline-position = 0%

# アンダーラインの太さ：ピクセル単位での調整値
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-underline-thickness = 0%

# ストライクスルーの位置調整：セル上部からストライクスルー上部までのピクセル単位またはパーセント値による調整量
# 値を増やすとストライクスルーが下に移動し、減らすと上に移動します
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-strikethrough-position = 0%

# ストライクスルーの太さ：ピクセル単位またはパーセント値による調整値
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-strikethrough-thickness = 0%

# オーバーラインの位置調整：セル上部からオーバーライン上部までのピクセル単位またはパーセント値による調整量
# 値を増やすとオーバーラインが下に移動し、減らすと上に移動します
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-overline-position = 0%

# オーバーラインの太さ：ピクセル単位またはパーセント値による調整値
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-overline-thickness = 0%

# バーカーソルおよびアウトライン矩形カーソルの太さ：ピクセル単位またはパーセント値による調整値
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-cursor-thickness = 0%

# カーソルの高さ：ピクセル単位またはパーセント値による調整値。現在はすべてのカーソルタイプ（バー、矩形、アウトライン矩形）に適用されます
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-cursor-height = 0%

# ボックス描画文字の太さ：ピクセル単位またはパーセント値による調整値
# `adjust-cell-width` の調整に関する注意事項を参照してください
adjust-box-thickness = 0%


# nerd font アイコンの最大高さをピクセル単位またはパーセント値で調整する値。
#
# この値を大きくすると、nerd font アイコンのサイズを大きくできますが、
# 必ずしも強制的に大きくなるわけではありません。この値を小さくすると、
# nerd font アイコンは小さくなります。
#
# アイコンの高さのデフォルト値は、プライマリフォントの大文字の高さの 1.2 倍です。
# 例えば、-16.6% に設定すると、アイコンの高さが大文字とほぼ同じになります。
#
# `adjust-cell-width` の調整に関する注意事項を参照してください。
#
# 対応バージョン: 1.2.0 以降
adjust-icon-height = -10%


# グラフエムクラスターのセル幅を計算する際に使用する手法を指定します。
# デフォルト値は `unicode` で、Unicode標準に基づいてグラフエム幅を決定します。
# これにより正確なグラフエム幅が得られますが、`wcswidth` などのレガシー方式を採用している
# 一部のプログラム（シェルなど）ではカーソル位置の同期問題が発生する可能性があります。
#
# 有効な値は以下の通りです：
#
# * `legacy` - wcswidth などのレガシー方式を用いてグラフエム幅を決定します。
#   これによりレガシープログラムとの互換性は最大化されますが、スキントーン絵文字や
#   非英語文字など特定のグラフエムに対して正確な幅が得られない場合があります。
#
#   これを「レガシー」と呼ぶのは、その動作仕様が未定義であり、将来的に変更する可能性を
#   残しておきたいためです。例えば、現在または将来的に libc の `wcswidth` を使用するかは
#   未定です。
#
# * `unicode` - Unicode標準に基づいてグラフエム幅を決定します。
#
# 実行中のプログラムが明示的に端末モード2027を有効にした場合、この設定にかかわらず
# `unicode` 方式による幅が強制的に適用されます。モード2027がリセットされると、
# この設定が再び有効になります。
#
# この設定は実行時に変更可能ですが、既存の端末には影響しません。新しい端末のみが
# 変更後の設定を適用します。
grapheme-width-method = unicode

# FreeTypeのロード時に有効化するフラグを指定します。この形式はカンマで区切られた
# 有効化対象のフラグリストです。フラグ名の先頭に `no-` を付けると無効化されます。
# フラグを指定しない場合はデフォルト値が使用されるため、不要なものは明示的に無効化する必要があります。
# また、`true` または `false` を使用することで、すべてのフラグを一括して有効/無効にできます。
#
# この設定は FreeType を使用する Ghostscript ビルドにのみ適用されます。
# 通常これは Linux ビルドの場合に限られます。macOSでは CoreText が使用されており、
# 同等の設定は存在しません。
#
# 利用可能なフラグ：
#
#   * `hinting` - ヒント処理の有効/無効を設定します。デフォルトでは有効です。
#
#   * `force-autohint` - フォントのネイティブヒント処理ではなく、常に FreeType の自動ヒント処理を
#     使用します。デフォルトでは無効です。
#
#   * `monochrome` - レンダラーに1ビットモノクロレンダリングを使用するよう指示します。
#     これによりアンチエイリアスが無効化され、ピクセルフォントを使用していない限り、
#     見た目があまり良くならない可能性があります。デフォルトでは無効です。
#
#   * `autohint` - FreeType の自動ヒント処理を有効にします。デフォルトでは有効です。
#
# 例：`hinting`, `no-hinting`, `force-autohint`, `no-force-autohint`
freetype-load-flags = hinting,no-force-autohint,no-monochrome,autohint


# 使用するテーマを指定します。組み込みテーマ名、カスタムテーマ名、またはカスタムテーマファイルへの絶対パスを指定できます。
# Ghosttyではさらに、ライトモードとダークモードで使用するテーマを個別に指定することも可能です。各オプションの詳細は以下に記載しています。
#
# テーマが絶対パスの場合、Ghosttyはそのファイルをテーマとして読み込もうとします。
# 該当するファイルが存在しない場合やアクセスできない場合、エラーがログに記録され、他のディレクトリは検索されません。
#
# テーマが絶対パスでない場合、2つの異なるディレクトリが検索され、テーマ名に一致するファイルが探されます。
# この検索はケースセンシティブです（ケースを区別するファイルシステムを使用している場合）。
# ただし、テーマ名にパス区切り文字を含めることは、絶対パスの場合を除きエラーとなります。
#
# 最初のディレクトリは、Ghosttyの設定ディレクトリ内の`themes`サブディレクトリです。
# 具体的には`$XDG_CONFIG_HOME/ghostty/themes`または`~/.config/ghostty/themes`となります。
#
# 2番目のディレクトリは、Ghosttyのリソースディレクトリ内の`themes`サブディレクトリです。
# Ghosttyには多数のテーマが標準で付属しており、これらはこのディレクトリにインストールされます。
# macOSではこのリストは`Ghostty.app/Contents/Resources/ghostty/themes`ディレクトリに、Linuxでは`share/ghostty/themes`ディレクトリに配置されます
# （Ghosttyの"share"ディレクトリをインストールした場所によって異なります）。
#
# 利用可能なテーマの一覧を表示するには、`ghostty +list-themes`コマンドを実行してください。
#
# テーマファイルは本質的に別のGhostty設定ファイルと同じものです。
# 同じ構文と設定オプションを共有しており、テーマファイルで有効な設定オプションはすべて設定可能です。
# ただし、信頼できないソースからのテーマファイルを使用することは避けてください。
# 組み込みテーマについては、安全な設定オプションのみが設定されるよう監査されています。
#
# 一部のオプションはテーマファイル内で設定することができません。この制限が存在する理由は自明です。
# テーマファイルでは`theme`や`config-file`オプションを設定することはできません。
# 現在の仕様では、テーマファイルでこれらのオプションを設定しても警告やエラーは表示されませんが、実際には無視されます。
#
# 背景色、前景色、パレットなどで指定する追加のカラー設定は、テーマで指定されたカラー設定を上書きします。
#
# ライトモードとダークモードで使用するテーマを個別に指定する場合は、以下の構文を使用します：`light:theme-name,dark:theme-name`。
# 例えば：`light:rose-pine-dawn,dark:rose-pine`。すべての値の前後の空白はトリミングされ、ライトモードとダークモードの指定順序は問いません。
# 両方のモードをこの形式で指定する必要があります。この形式で指定した場合、使用されるテーマは現在のデスクトップ環境のテーマに基づいて決定されます。

theme = "Catppuccin Macchiato"

# ウィンドウの背景色
# 16進数表記（`#RRGGBB`または`RRGGBB`）またはX11で定義されたカラー名で指定します
# background = #282c34

# ウィンドウの前景色
# 16進数表記（`#RRGGBB`または`RRGGBB`）またはX11で定義されたカラー名で指定します
# foreground = #ffffff


# ターミナルの背景画像を指定します。
#
# 指定する値は PNG または JPEG 形式のファイルパスである必要があります。
# その他の画像形式は現在サポートされていません。
#
# 現在の実装では、背景画像はターミナルごとに設定されます（ウィンドウ単位ではありません）。
# 頻繁にウィンドウを分割して使用する場合、背景画像は分割されたウィンドウ間で繰り返されます。
# この問題は将来の Ghostty の改良で解決される予定です。
#
# 警告: 現在の実装では、背景画像はターミナルごとに VRAM 上で重複して保持されます。
# 画像サイズが大きい場合、この方式では VRAM 使用量が大幅に増加する可能性があります
# （具体的には VRAM 使用量が増加します）。将来の Ghostty の改良では、
# 画像テクスチャをターミナル間で共有することでこの問題を解決する予定です。
#
# 対応バージョン: 1.2.0 以降
background-image = "~/Pictures/Pictures.library/images/MFSBCAFBH2356.info/lh3.png"

# 背景画像の不透明度設定
#
# この値は `background-opacity` の設定値に対する相対値です。
#
# 値を `1.0` に設定した場合（デフォルト値）、背景画像は基本背景色の上に配置され、
# その後 `background-opacity` で指定された不透明度に合わせて合成されます。
#
# 値を `1.0` 未満に設定した場合、背景画像は基本背景色と混合された後、
# 設定された `background-opacity` に合わせて調整されます。
#
# 値を `1.0` より大きく設定した場合、背景画像の不透明度は基本背景色よりも高くなります。
# 例えば、設定された `background-opacity` が `0.5` で `background-image-opacity` を `1.5` に設定した場合、
# 最終的な背景画像の不透明度は `0.5 * 1.5 = 0.75` となります。
#
# 対応バージョン: 1.2.0 以降
background-image-opacity = 0.25

# 背景画像の表示位置
#
# 有効な値は以下の通りです:
#   * `top-left`（左上）
#   * `top-center`（中央上）
#   * `top-right`（右上）
#   * `center-left`（左中央）
#   * `center`（中央）
#   * `center-right`（右中央）
#   * `bottom-left`（左下）
#   * `bottom-center`（中央下）
#   * `bottom-right`（右下）
#
# デフォルト値は `center` です。
#
# 対応バージョン: 1.2.0 以降
background-image-position = center

# 背景画像の表示方法
#
# 有効な値は以下の通りです:
#
#  * `contain`
#
#    アスペクト比を維持したまま、背景画像をターミナル内に完全に収まる最大サイズに拡大します。
#    これにより画像全体が視認可能になります。
#
#  * `cover`
#
#    アスペクト比を維持したまま、背景画像をターミナル全体を覆う最小サイズに拡大します。
#    この場合、画像の一部がターミナルの端で切り取られる可能性があります。
#
#  * `stretch`
#
#    アスペクト比を維持せず、背景画像をターミナルの全面に拡大します。
#
#  * `none`
#
#    背景画像を拡大しません。
#
# デフォルト値は `contain` です。
#
# 対応バージョン: 1.2.0 以降
background-image-fit = cover

# 背景画像の繰り返し表示の有無
#
# この設定を `true` に設定した場合、背景画像がターミナル領域を完全に埋められない場合に
# 周囲に空白が生じるのを防ぐため、画像が繰り返し表示されます。
#
# デフォルト値は `false` です。
#
# 対応バージョン: 1.2.0 以降
background-image-repeat = false


# 選択範囲の前景色と背景色。この設定がされていない場合、選択範囲の色は
# ウィンドウの背景色と前景色を反転したものになります（注：セルの背景色/前景色とは異なります）。
# 指定方法は16進数表記（`#RRGGBB`または`RRGGBB`）またはX11標準のカラーネームのいずれかです。
# バージョン1.2.0以降では、セルの前景色と一致させる場合は`cell-foreground`、
# 背景色と一致させる場合は`cell-background`としても設定可能です。
# selection-foreground =

# selection-background =

# 入力時に選択範囲のテキストをクリアするかどうか。デフォルト値は`true`です。
# これはほとんどのターミナルエミュレータやテキスト入力フィールドで標準的な動作です。
# この設定を`false`にすると、入力時に選択範囲のテキストはクリアされなくなります。
#
# 「入力」とは、シフトキー、コントロールキー、アルトキーなどの修飾キー以外のキー入力を指し、
# これらの入力はターミナル内で動作するアプリケーション（例：シェル）に送信されるデータを生成します。
# また、プレエディット状態や文字入力中の状態が開始された場合も選択範囲はクリアされます
# （例：日本語などの言語を入力している場合）。
#
# この設定が`false`の場合、選択範囲は手動で1回クリックするか`escape`キーを押すことで
# 手動でクリアすることが可能です。
#
# 対応バージョン: 1.2.0以降
selection-clear-on-typing = true

# コピー操作後に選択範囲をクリアするかどうか。デフォルト値は`false`です。
#
# この設定を`true`にすると、`copy_to_clipboard`キーボードバインドを使用した
# すべてのコピー操作後に自動的に選択範囲がクリアされます。ただし、
# `copy-on-select`機能を使用してコピーした場合は選択範囲はクリアされません。
#
# この設定を`false`にすると、コピー後も選択範囲は表示されたままになるため、
# コピーした内容を確認したり、同じ選択範囲で追加の操作を行うことが可能です。
selection-clear-on-copy = false

# 前景色と背景色の間に必要な最小コントラスト比。
# コントラスト比は1から21までの値で表され、値1はコントラストが全くない状態（例：黒地に黒文字）を意味します。
# この値は[WCAG 2.0規格](https://www.w3.org/TR/WCAG20/)で定義されているコントラスト比です。
#
# 背景色と同じ色でテキストが表示されないようにする場合、1.1程度の値が適切です。
# 読みにくいテキストを回避したい場合には、3以上の値を設定することをお勧めします。
# 値が大きいほど、テキストが黒または白で表示される可能性が高くなります。
#
# この値は絵文字や画像には適用されません。
minimum-contrast = 1

# 256色表示に対応したターミナルアプリケーションで標準的に使用されるカラーパレット設定
# この設定ファイルの書式は `N=COLOR` 形式であり、`N` は0から255までの値（ターミナルのカラーテーブルにおける256色に対応する）で、`COLOR` は標準的なRGBカラーコード（例：`#AABBCC` または `AABBCC`）、あるいはX11で定義されたカラー名のいずれかを指定します。
#
# パレットインデックスの表記形式は、十進数、二進数、八進数、十六進数のいずれかを使用できます。
# 特に指定がない場合、デフォルトでは十進数として解釈されます。二進数の場合は接頭辞 `0b`、八進数の場合は `0o`、十六進数の場合は `0x` を使用します。
#
# カラーインデックスの定義内容とそれらが標準的にマッピングされる色については、[こちらのチートシート](https://www.ditig.com/256-colors-cheat-sheet)を参照してください。
# palette = 0 = #1d1f21
# palette = 1 = #cc6666
# palette = 2 = #b5bd68
# palette = 3 = #f0c674
# palette = 4 = #81a2be
# palette = 5 = #b294bb
# palette = 6 = #8abeb7
# palette = 7 = #c5c8c6
# palette = 8 = #666666


# カーソルの色を指定します。設定されていない場合は、デフォルト値が使用されます。
#
# 直接色を指定する場合、16進数表記（`#RRGGBB` または `RRGGBB`）またはX11のカラーネームを使用できます。
#
# さらに、実行時に他の色に合わせて色を設定するための特殊値も利用可能です：
#
#   * `cell-foreground` - セルの前景色に合わせます
#     （対応バージョン：1.2.0以降）
#
#   * `cell-background` - セルの背景色に合わせます
#     （対応バージョン：1.2.0以降）
cursor-color = "cell-foreground"

# カーソルの不透明度レベル（透過性の逆数）を指定します。値が1の場合は完全に不透明、0の場合は完全に透過です。0未満または1を超える値は有効な範囲にクリップされます。なお、0.3などの十分に小さい値は実質的に見えなくなる可能性があり、カーソルの位置を確認しにくくなる場合があります。
cursor-opacity = 1

# カーソルのスタイルを指定します。これはデフォルトスタイルを設定します。実行中のプログラムはエスケープシーケンス（例：`CSI q`）を使用して明示的なカーソルスタイルを要求できます。シェルの設定では特定のカーソルスタイルを要求することがよくあります。
#
# 注意：シェル統合機能では、プロンプト表示時にこの設定に関わらず自動的にバー型カーソルが使用されます。この動作を無効にするには、`shell-integration-features = no-cursor`を指定するか、シェル統合機能自体を無効にしてください。
#
# 有効な値は以下の通りです：
#
#   * `block`
#   * `bar`
#   * `underline`
#   * `block_hollow`
cursor-style = block

# カーソルの点滅状態のデフォルト設定を行います。これは単なるデフォルト状態であり、実行中のプログラムは`DECSCUSR`（`CSI q`）を使用してカーソルスタイルを上書きできます。
#
# この設定がされていない場合、カーソルはデフォルトで点滅します。ただし、後述の通りこれは「真の」点滅状態とは異なります。
#
# この設定が全くされていない場合（`null`）、GhosttyはDECモード12（AT&Tカーソル点滅）を点滅のオン/オフ切り替えの代替手段として尊重します。この設定が`null`以外の値に設定されている場合、DECモード12は無視されますが、`DECSCUSR`コマンドは依然として有効です。
#
# 有効な値は以下の通りです：
#
#   * ` `（スペース）
#   * `true`
#   * `false`
cursor-style-blink = true

# カーソル位置のテキスト色を指定します。設定されていない場合は、デフォルト値が使用されます。
# 16進数表記（`#RRGGBB` または `RRGGBB`）またはX11のカラーネームで指定します。
# バージョン1.2.0以降では、`cell-foreground`を指定してセルの前景色に合わせるか、`cell-background`を指定してセルの背景色に合わせることもできます。
# cursor-text =

# Linux環境では`alt+クリック`、macOS環境では`option+クリック`を使用してプロンプト上でカーソルを移動できる機能を有効にします。
#
# この機能を使用するにはシェル統合機能（特に`OSC 133`によるプロンプトマーク機能）が必要で、プライマリスクリーンモードでのみ動作します。vimなどの代替スクリーンアプリケーションでは通常独自のこの機能が実装されていますが、この設定ではその制御はできません。
#
# 注意：この機能はユーザーが指定した位置を一連の擬似矢印キー操作に変換することで動作するため、エッジケース周辺で奇妙な動作が発生する可能性があります。残念ながら、これがターミナルでこの機能を実装する唯一の方法なのです。
cursor-click-to-move = true


# タイピングを開始するとすぐにマウスを非表示にします。マウスが使用された場合（ボタン操作や移動など）、
# 再びマウスが表示されます。プラットフォーム固有の動作により、他の状況でマウスが表示される場合もあります。
# 例えばmacOSでは、新しいウィンドウ、タブ、または分割画面が作成された際にマウスが再び表示されます。
mouse-hide-while-typing = false

# サーフェスを最下部までスクロールするタイミングを指定します。この設定はカンマで区切られたオプションのリスト形式で指定します。
# オプション名の先頭に`no-`を付けると機能が無効化されます。オプションを省略した場合、デフォルト値が使用されます。
#
# 利用可能なオプション:
#
# - `keystroke` このオプションを有効にすると、ユーザーがキーを押した際にPTYにデータが送信される場合（基本的に修飾キーやGhosttyで処理されるキーバインド以外のキー操作）、
#   サーフェスが自動的に最下部までスクロールされます。
#
# - `output` このオプションを有効にすると、表示すべき新しいデータがある場合にサーフェスが自動的に最下部までスクロールされます。
#   （現在この機能は実装されていません。）
#
# デフォルト設定は`keystroke, no-output`です。
scroll-to-bottom = keystroke,no-output


# 実行中のプログラムがマウスクリック時にシフトキーが押されたことを検出するかどうかを指定します。
# 通常、シフトキーはマウスによる選択範囲を拡大するために使用されます。
#
# デフォルト値の `false` は、シフトキーがマウスプロトコルと共に送信されず、選択範囲が拡大されないことを意味します。
# この値は `XTSHIFTESCAPE` シーケンスを使用することで、実行中のプログラムによって条件付きで上書き可能です。
#
# 値 `true` は、シフトキーがマウスプロトコルと共に送信されますが、実行中のプログラムが `XTSHIFTESCAPE` でこの動作を上書きできることを意味します。
#
# 値 `never` は `false` と同じですが、実行中のプログラムが `XTSHIFTESCAPE` でこの動作を上書きすることはできません。
# 値 `always` は `true` と同じですが、実行中のプログラムが `XTSHIFTESCAPE` でこの動作を上書きすることはできません。
#
# プログラムが別の動作を要求した場合でも、常にシフトキーでマウス選択範囲を拡大したい場合は、この値を `never` に設定してください。
#
# 有効な値は以下の通りです:
#
#   * `true`
#   * `false`
#   * `always`
#   * `never`
mouse-shift-capture = false

# マウスホイールによるスクロール量を調整する倍率です。0.01 未満または 10,000 を超える値は有効な範囲にクランプされます。
#
# デフォルト値の "3" では、1 ティックごとに 3 行分スクロールします。
#
# 対応バージョン: 1.2.0 以降
mouse-scroll-multiplier = 2


# 背景の不透明度レベル（透過度とは逆の値）です。
# 値が 1 の場合は完全に不透明、0 の場合は完全に透過します。
# 0 未満または 1 を超える値は有効な範囲内にクリップされます。
#
# macOS では、ターミナルがネイティブフルスクリーンモードに入ると、背景の不透明度設定は無効になります。
# これは背景がグレー色になるため、ウィジェットが透けて表示されてしまうことがあり、一般的には望ましくないためです。
#
# macOS では、この設定を変更するには Ghostty を完全に再起動する必要があります。
background-opacity = 0.8

# 明示的に背景色が設定されているセルに対して背景の不透明度を適用します。
#
# 通常、`background-opacity` はウィンドウの背景にのみ適用されます。
# セルに明示的に背景色が設定されている場合（例えば赤色など）、その背景色は完全に不透明になります。
# この場合の影響として、Neovim や Tmux など、ターミナルの背景色を再描画する一部の
# ターミナルアプリケーションでは、`background-opacity` 設定が無視される可能性があります（これは設計上の仕様です）。
#
# この値を `true` に設定すると、明示的な背景色が設定されているかどうかにかかわらず、
# すべてのセルに対して `background-opacity` が適用されます。
#
# 対応バージョン: 1.2.0 以降
background-opacity-cells = true


# `background-opacity` が 1 未満の場合に背景をぼかすかどうかを設定するオプションです。
#
# 有効な値は以下の通りです:
#
#   * 非負の整数で指定する *ぼかし強度*
#   * `false` （ぼかし強度 0 と同等）
#   * `true` （デフォルトのぼかし強度 20 と同等）
#     これは見た目の良いぼかし効果を得るのに適切な値です。ぼかし強度を高くしすぎると、
#     レンダリング異常やパフォーマンス低下を引き起こす可能性があります。
#
# この機能は macOS および一部の Linux デスクトップ環境でサポートされています。具体的には:
#
#   * KDE Plasma（Wayland および X11 対応）
#
# 注意: KDE Plasma 環境では正確なぼかし強度は _無視されます_。この設定を `true` または任意の正のぼかし強度値に設定しても、
# 同じ効果が得られます。これは、Plasma のウィンドウコンポーザである KWin がグローバルぼかし設定を1つしか持たず、
# アプリケーションごとに個別のぼかし設定を指定できないためです。
#
# KWin のグローバルぼかし設定を変更するには、システム設定を開き、「アプリとウィンドウ」 > 「ウィンドウ管理」 > 「デスクトップ効果」に移動し、
# 「ぼかし」プラグインを選択してください。無効になっている場合は、左側のチェックボックスをオンにして有効化します。
# 次に「設定」ボタンをクリックすると、すべてのアプリケーション（Ghostty を含む）の背景ぼかしとノイズ強度を設定できる
# 2つのスライダーが表示されます。
#
# その他の Linux デスクトップ環境については、現時点ではサポート対象外です。背景ぼかし機能を利用するには、環境固有の設定を
# 手動で設定するか、サードパーティ製プラグインをインストールする必要がある場合があります。統一されたインターフェースが
# 用意されていないためです。
background-blur = true

# フォーカスされていない分割領域の不透明度レベル（透過度とは逆の概念）を指定します。
# デフォルトでは、フォーカスされていない分割領域はわずかに半透明に表示され、
# どの分割領域が現在フォーカスされているかを容易に識別できるようになっています。
# この機能を無効にする場合は、この値を 1 に設定してください。
#
# 値 1 は完全に不透明、値 0 は完全に透明を意味します。ただし、
# "0" は実用的ではありません（ウィンドウが非常に不自然な見た目になるため）、
# 最小値は 0.15 に設定されています。この値でもまだ不自然に見えますが、
# 少なくとも画面の状況は把握できます。0.15 から 1 の範囲外の値は、
# 有効な範囲内の最も近い値に自動的に制限されます。
unfocused-split-opacity = 0.7


# フォーカスが外れている分割領域を暗くする色を指定します。フォーカスが外れている分割領域は、
# 半透明の矩形をその上に描画することで暗く表示されます。この設定ではその矩形の色を設定でき、
# 暗転効果を細かく調整することが可能です。
#
# デフォルトでは背景色が適用されます。
#
# 色の指定方法は、16進数表記（`#RRGGBB` または `RRGGBB`）または X11 の名前付きカラー名のいずれかです。
unfocused-split-fill =


# The color of the split divider. If this is not set, a default will be chosen.
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
#
# Available since: 1.1.0
split-divider-color =

# The command to run, usually a shell. If this is not an absolute path, it'll
# be looked up in the `PATH`. If this is not set, a default will be looked up
# from your system. The rules for the default lookup are:
#
#   * `SHELL` environment variable
#
#   * `passwd` entry (user information)
#
# This can contain additional arguments to run the command with. If additional
# arguments are provided, the command will be executed using `/bin/sh -c`
# to offload shell argument expansion.
#
# To avoid shell expansion altogether, prefix the command with `direct:`, e.g.
# `direct:nvim foo`. This will avoid the roundtrip to `/bin/sh` but will also
# not support any shell parsing such as arguments with spaces, filepaths with
# `~`, globs, etc. (Available since: 1.2.0)
#
# You can also explicitly prefix the command with `shell:` to always wrap the
# command in a shell. This can be used to ensure our heuristics to choose the
# right mode are not used in case they are wrong. (Available since: 1.2.0)
#
# This command will be used for all new terminal surfaces, i.e. new windows,
# tabs, etc. If you want to run a command only for the first terminal surface
# created when Ghostty starts, use the `initial-command` configuration.
#
# Ghostty supports the common `-e` flag for executing a command with
# arguments. For example, `ghostty -e fish --with --custom --args`.
# This flag sets the `initial-command` configuration, see that for more
# information.
command =

# This is the same as "command", but only applies to the first terminal
# surface created when Ghostty starts. Subsequent terminal surfaces will use
# the `command` configuration.
#
# After the first terminal surface is created (or closed), there is no
# way to run this initial command again automatically. As such, setting
# this at runtime works but will only affect the next terminal surface
# if it is the first one ever created.
#
# If you're using the `ghostty` CLI there is also a shortcut to set this
# with arguments directly: you can use the `-e` flag. For example: `ghostty -e
# fish --with --custom --args`. The `-e` flag automatically forces some
# other behaviors as well:
#
#   * Disables shell expansion since the input is expected to already
#     be shell-expanded by the upstream (e.g. the shell used to type in
#     the `ghostty -e` command).
#
#   * `gtk-single-instance=false` - This ensures that a new instance is
#     launched and the CLI args are respected.
#
#   * `quit-after-last-window-closed=true` - This ensures that the Ghostty
#     process will exit when the command exits. Additionally, the
#     `quit-after-last-window-closed-delay` is unset.
#
#   * `shell-integration=detect` (if not `none`) - This prevents forcibly
#     injecting any configured shell integration into the command's
#     environment. With `-e` its highly unlikely that you're executing a
#     shell and forced shell integration is likely to cause problems
#     (e.g. by wrapping your command in a shell, setting env vars, etc.).
#     This is a safety measure to prevent unexpected behavior. If you want
#     shell integration with a `-e`-executed command, you must either
#     name your binary appropriately or source the shell integration script
#     manually.
initial-command =

# Extra environment variables to pass to commands launched in a terminal
# surface. The format is `env=KEY=VALUE`.
#
# `env = foo=bar`
# `env = bar=baz`
#
# Setting `env` to an empty string will reset the entire map to default
# (empty).
#
# `env =`
#
# Setting a key to an empty string will remove that particular key and
# corresponding value from the map.
#
# `env = foo=bar`
# `env = foo=`
#
# will result in `foo` not being passed to the launched commands.
#
# Setting a key multiple times will overwrite previous entries.
#
# `env = foo=bar`
# `env = foo=baz`
#
# will result in `foo=baz` being passed to the launched commands.
#
# These environment variables will override any existing environment
# variables set by Ghostty. For example, if you set `GHOSTTY_RESOURCES_DIR`
# then the value you set here will override the value Ghostty typically
# automatically injects.
#
# These environment variables _will not_ be passed to commands run by Ghostty
# for other purposes, like `open` or `xdg-open` used to open URLs in your
# browser.
#
# Available since: 1.2.0
env =

# Data to send as input to the command on startup.
#
# The configured `command` will be launched using the typical rules,
# then the data specified as this input will be written to the pty
# before any other input can be provided.
#
# The bytes are sent as-is with no additional encoding. Therefore, be
# cautious about input that can contain control characters, because this
# can be used to execute programs in a shell.
#
# The format of this value is:
#
#   * `raw:<string>` - Send raw text as-is. This uses Zig string literal
#     syntax so you can specify control characters and other standard
#     escapes.
#
#   * `path:<path>` - Read a filepath and send the contents. The path
#     must be to a file with finite length. e.g. don't use a device
#     such as `/dev/stdin` or `/dev/urandom` as these will block
#     terminal startup indefinitely. Files are limited to 10MB
#     in size to prevent excessive memory usage. If you have files
#     larger than this you should write a script to read the file
#     and send it to the terminal.
#
# If no valid prefix is found, it is assumed to be a `raw:` input.
# This is an ergonomic choice to allow you to simply write
# `input = "Hello, world!"` (a common case) without needing to prefix
# every value with `raw:`.
#
# This can be repeated multiple times to send more data. The data
# is concatenated directly with no separator characters in between
# (e.g. no newline).
#
# If any of the input sources do not exist, then none of the input
# will be sent. Input sources are not verified until the terminal
# is starting, so missing paths will not show up in config validation.
#
# Changing this configuration at runtime will only affect new
# terminals.
#
# Available since: 1.2.0
input =

# If true, keep the terminal open after the command exits. Normally, the
# terminal window closes when the running command (such as a shell) exits.
# With this true, the terminal window will stay open until any keypress is
# received.
#
# This is primarily useful for scripts or debugging.
wait-after-command = false

# The number of milliseconds of runtime below which we consider a process exit
# to be abnormal. This is used to show an error message when the process exits
# too quickly.
#
# On Linux, this must be paired with a non-zero exit code. On macOS, we allow
# any exit code because of the way shell processes are launched via the login
# command.
abnormal-command-exit-runtime = 250

# The size of the scrollback buffer in bytes. This also includes the active
# screen. No matter what this is set to, enough memory will always be
# allocated for the visible screen and anything leftover is the limit for
# the scrollback.
#
# When this limit is reached, the oldest lines are removed from the
# scrollback.
#
# Scrollback currently exists completely in memory. This means that the
# larger this value, the larger potential memory usage. Scrollback is
# allocated lazily up to this limit, so if you set this to a very large
# value, it will not immediately consume a lot of memory.
#
# This size is per terminal surface, not for the entire application.
#
# It is not currently possible to set an unlimited scrollback buffer.
# This is a future planned feature.
#
# This can be changed at runtime but will only affect new terminal surfaces.
scrollback-limit = 10000000

# Match a regular expression against the terminal text and associate clicking
# it with an action. This can be used to match URLs, file paths, etc. Actions
# can be opening using the system opener (e.g. `open` or `xdg-open`) or
# executing any arbitrary binding action.
#
# Links that are configured earlier take precedence over links that are
# configured later.
#
# A default link that matches a URL and opens it in the system opener always
# exists. This can be disabled using `link-url`.
#
# TODO: This can't currently be set!

# Enable URL matching. URLs are matched on hover with control (Linux) or
# command (macOS) pressed and open using the default system application for
# the linked URL.
#
# The URL matcher is always lowest priority of any configured links (see
# `link`). If you want to customize URL matching, use `link` and disable this.
link-url = true

# Show link previews for a matched URL.
#
# When true, link previews are shown for all matched URLs. When false, link
# previews are never shown. When set to "osc8", link previews are only shown
# for hyperlinks created with the OSC 8 sequence (in this case, the link text
# can differ from the link destination).
#
# Available since: 1.2.0
link-previews = true

# Whether to start the window in a maximized state. This setting applies
# to new windows and does not apply to tabs, splits, etc. However, this setting
# will apply to all new windows, not just the first one.
#
# Available since: 1.1.0
maximize = false

# Start new windows in fullscreen. This setting applies to new windows and
# does not apply to tabs, splits, etc. However, this setting will apply to all
# new windows, not just the first one.
#
# On macOS, this setting does not work if window-decoration is set to
# "false", because native fullscreen on macOS requires window decorations
# to be set.
fullscreen = false

# The title Ghostty will use for the window. This will force the title of the
# window to be this title at all times and Ghostty will ignore any set title
# escape sequences programs (such as Neovim) may send.
#
# If you want a blank title, set this to one or more spaces by quoting
# the value. For example, `title = " "`. This effectively hides the title.
# This is necessary because setting a blank value resets the title to the
# default value of the running program.
#
# This configuration can be reloaded at runtime. If it is set, the title
# will update for all windows. If it is unset, the next title change escape
# sequence will be honored but previous changes will not retroactively
# be set. This latter case may require you to restart programs such as Neovim
# to get the new title.
title =

# The setting that will change the application class value.
#
# This controls the class field of the `WM_CLASS` X11 property (when running
# under X11), the Wayland application ID (when running under Wayland), and the
# bus name that Ghostty uses to connect to DBus.
#
# Note that changing this value between invocations will create new, separate
# instances, of Ghostty when running with `gtk-single-instance=true`. See that
# option for more details.
#
# Changing this value may break launching Ghostty from `.desktop` files, via
# DBus activation, or systemd user services as the system is expecting Ghostty
# to connect to DBus using the default `class` when it is launched.
#
# The class name must follow the requirements defined [in the GTK
# documentation](https://docs.gtk.org/gio/type_func.Application.id_is_valid.html).
#
# The default is `com.mitchellh.ghostty`.
#
# This only affects GTK builds.
class =

# This controls the instance name field of the `WM_CLASS` X11 property when
# running under X11. It has no effect otherwise.
#
# The default is `ghostty`.
#
# This only affects GTK builds.
x11-instance-name =

# The directory to change to after starting the command.
#
# This setting is secondary to the `window-inherit-working-directory`
# setting. If a previous Ghostty terminal exists in the same process,
# `window-inherit-working-directory` will take precedence. Otherwise, this
# setting will be used. Typically, this setting is used only for the first
# window.
#
# The default is `inherit` except in special scenarios listed next. On macOS,
# if Ghostty can detect it is launched from launchd (double-clicked) or
# `open`, then it defaults to `home`. On Linux with GTK, if Ghostty can detect
# it was launched from a desktop launcher, then it defaults to `home`.
#
# The value of this must be an absolute value or one of the special values
# below:
#
#   * `home` - The home directory of the executing user.
#
#   * `inherit` - The working directory of the launching process.
working-directory =

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values. The list of actions is available in
# the documentation or using the `ghostty +list-actions` command.
#
# Trigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,
# `ctrl+shift+b`, `up`.
#
# If the key is a single Unicode codepoint, the trigger will match
# any presses that produce that codepoint. These are impacted by
# keyboard layouts. For example, `a` will match the `a` key on a
# QWERTY keyboard, but will match the `q` key on a AZERTY keyboard
# (assuming US physical layout).
#
# For Unicode codepoints, matching is done by comparing the set of
# modifiers with the unmodified codepoint. The unmodified codepoint is
# sometimes called an "unshifted character" in other software, but all
# modifiers are considered, not only shift. For example, `ctrl+a` will match
# `a` but not `ctrl+shift+a` (which is `A` on a US keyboard).
#
# Further, codepoint matching is case-insensitive and the unmodified
# codepoint is always case folded for comparison. As a result,
# `ctrl+A` configured will match when `ctrl+a` is pressed. Note that
# this means some key combinations are impossible depending on keyboard
# layout. For example, `ctrl+_` is impossible on a US keyboard because
# `_` is `shift+-` and `ctrl+shift+-` is not equal to `ctrl+_` (because
# the modifiers don't match!). More details on impossible key combinations
# can be found at this excellent source written by Qt developers:
# https://doc.qt.io/qt-6/qkeysequence.html#keyboard-layout-issues
#
# Physical key codes can be specified by using any of the key codes
# as specified by the [W3C specification](https://www.w3.org/TR/uievents-code/).
# For example, `KeyA` will match the physical `a` key on a US standard
# keyboard regardless of the keyboard layout. These are case-sensitive.
#
# For aesthetic reasons, the w3c codes also support snake case. For
# example, `key_a` is equivalent to `KeyA`. The only exceptions are
# function keys, e.g. `F1` is `f1` (no underscore). This is a consequence
# of our internal code using snake case but is purposely supported
# and tested so it is safe to use. It allows an all-lowercase binding
# which I find more aesthetically pleasing.
#
# Function keys such as `insert`, `up`, `f5`, etc. are also specified
# using the keys as specified by the previously linked W3C specification.
#
# Physical keys always match with a higher priority than Unicode codepoints,
# so if you specify both `a` and `KeyA`, the physical key will always be used
# regardless of what order they are configured.
#
# Valid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,
# `option`), and `super` (alias: `cmd`, `command`). You may use the modifier
# or the alias. When debugging keybinds, the non-aliased modifier will always
# be used in output.
#
# Note: The fn or "globe" key on keyboards are not supported as a
# modifier. This is a limitation of the operating systems and GUI toolkits
# that Ghostty uses.
#
# Some additional notes for triggers:
#
#   * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.
#
#   * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,
#     but valid.
#
#   * only a single key input is allowed, `ctrl+a+b` is invalid.
#
# You may also specify multiple triggers separated by `>` to require a
# sequence of triggers to activate the action. For example,
# `ctrl+a>n=new_window` will only trigger the `new_window` action if the
# user presses `ctrl+a` followed separately by `n`. In other software, this
# is sometimes called a leader key, a key chord, a key table, etc. There
# is no hardcoded limit on the number of parts in a sequence.
#
# Warning: If you define a sequence as a CLI argument to `ghostty`,
# you probably have to quote the keybind since `>` is a special character
# in most shells. Example: ghostty --keybind='ctrl+a>n=new_window'
#
# A trigger sequence has some special handling:
#
#   * Ghostty will wait an indefinite amount of time for the next key in
#     the sequence. There is no way to specify a timeout. The only way to
#     force the output of a prefix key is to assign another keybind to
#     specifically output that key (e.g. `ctrl+a>ctrl+a=text:foo`) or
#     press an unbound key which will send both keys to the program.
#
#   * If a prefix in a sequence is previously bound, the sequence will
#     override the previous binding. For example, if `ctrl+a` is bound to
#     `new_window` and `ctrl+a>n` is bound to `new_tab`, pressing `ctrl+a`
#     will do nothing.
#
#   * Adding to the above, if a previously bound sequence prefix is
#     used in a new, non-sequence binding, the entire previously bound
#     sequence will be unbound. For example, if you bind `ctrl+a>n` and
#     `ctrl+a>t`, and then bind `ctrl+a` directly, both `ctrl+a>n` and
#     `ctrl+a>t` will become unbound.
#
#   * Trigger sequences are not allowed for `global:` or `all:`-prefixed
#     triggers. This is a limitation we could remove in the future.
#
# Action is the action to take when the trigger is satisfied. It takes the
# format `action` or `action:param`. The latter form is only valid if the
# action requires a parameter.
#
#   * `ignore` - Do nothing, ignore the key input. This can be used to
#     black hole certain inputs to have no effect.
#
#   * `unbind` - Remove the binding. This makes it so the previous action
#     is removed, and the key will be sent through to the child command
#     if it is printable. Unbind will remove any matching trigger,
#     including `physical:`-prefixed triggers without specifying the
#     prefix.
#
#   * `csi:text` - Send a CSI sequence. e.g. `csi:A` sends "cursor up".
#
#   * `esc:text` - Send an escape sequence. e.g. `esc:d` deletes to the
#     end of the word to the right.
#
#   * `text:text` - Send a string. Uses Zig string literal syntax.
#     e.g. `text:\x15` sends Ctrl-U.
#
#   * All other actions can be found in the documentation or by using the
#     `ghostty +list-actions` command.
#
# Some notes for the action:
#
#   * The parameter is taken as-is after the `:`. Double quotes or
#     other mechanisms are included and NOT parsed. If you want to
#     send a string value that includes spaces, wrap the entire
#     trigger/action in double quotes. Example: `--keybind="up=csi:A B"`
#
# There are some additional special values that can be specified for
# keybind:
#
#   * `keybind=clear` will clear all set keybindings. Warning: this
#     removes ALL keybindings up to this point, including the default
#     keybindings.
#
# The keybind trigger can be prefixed with some special values to change
# the behavior of the keybind. These are:
#
#  * `all:`
#
#    Make the keybind apply to all terminal surfaces. By default,
#    keybinds only apply to the focused terminal surface. If this is true,
#    then the keybind will be sent to all terminal surfaces. This only
#    applies to actions that are surface-specific. For actions that
#    are already global (e.g. `quit`), this prefix has no effect.
#
#    Available since: 1.0.0
#
#  * `global:`
#
#    Make the keybind global. By default, keybinds only work within Ghostty
#    and under the right conditions (application focused, sometimes terminal
#    focused, etc.). If you want a keybind to work globally across your system
#    (e.g. even when Ghostty is not focused), specify this prefix.
#    This prefix implies `all:`.
#
#    Note: this does not work in all environments; see the additional notes
#    below for more information.
#
#    Available since: 1.0.0 on macOS, 1.2.0 on GTK
#
#  * `unconsumed:`
#
#    Do not consume the input. By default, a keybind will consume the input,
#    meaning that the associated encoding (if any) will not be sent to the
#    running program in the terminal. If you wish to send the encoded value
#    to the program, specify the `unconsumed:` prefix before the entire
#    keybind. For example: `unconsumed:ctrl+a=reload_config`. `global:` and
#    `all:`-prefixed keybinds will always consume the input regardless of
#    this setting. Since they are not associated with a specific terminal
#    surface, they're never encoded.
#
#    Available since: 1.0.0
#
#  * `performable:`
#
#    Only consume the input if the action is able to be performed.
#    For example, the `copy_to_clipboard` action will only consume the input
#    if there is a selection to copy. If there is no selection, Ghostty
#    behaves as if the keybind was not set. This has no effect with `global:`
#    or `all:`-prefixed keybinds. For key sequences, this will reset the
#    sequence if the action is not performable (acting identically to not
#    having a keybind set at all).
#
#    Performable keybinds will not appear as menu shortcuts in the
#    application menu. This is because the menu shortcuts force the
#    action to be performed regardless of the state of the terminal.
#    Performable keybinds will still work, they just won't appear as
#    a shortcut label in the menu.
#
#    Available since: 1.1.0
#
# Keybind triggers are not unique per prefix combination. For example,
# `ctrl+a` and `global:ctrl+a` are not two separate keybinds. The keybind
# set later will overwrite the keybind set earlier. In this case, the
# `global:` keybind will be used.
#
# Multiple prefixes can be specified. For example,
# `global:unconsumed:ctrl+a=reload_config` will make the keybind global
# and not consume the input to reload the config.
#
# Note: `global:` is only supported on macOS and certain Linux platforms.
#
# On macOS, this feature requires accessibility permissions to be granted
# to Ghostty. When a `global:` keybind is specified and Ghostty is launched
# or reloaded, Ghostty will attempt to request these permissions.
# If the permissions are not granted, the keybind will not work. On macOS,
# you can find these permissions in System Preferences -> Privacy & Security
# -> Accessibility.
#
# On Linux, you need a desktop environment that implements the
# [Global Shortcuts](https://flatpak.github.io/xdg-desktop-portal/docs/doc-org.freedesktop.portal.GlobalShortcuts.html)
# protocol as a part of its XDG desktop protocol implementation.
# Desktop environments that are known to support (or not support)
# global shortcuts include:
#
#  - Users using KDE Plasma (since [5.27](https://kde.org/announcements/plasma/5/5.27.0/#wayland))
#    and GNOME (since [48](https://release.gnome.org/48/#and-thats-not-all)) should be able
#    to use global shortcuts with little to no configuration.
#
#  - Some manual configuration is required on Hyprland. Consult the steps
#    outlined on the [Hyprland Wiki](https://wiki.hyprland.org/Configuring/Binds/#dbus-global-shortcuts)
#    to set up global shortcuts correctly.
#    (Important: [`xdg-desktop-portal-hyprland`](https://wiki.hyprland.org/Hypr-Ecosystem/xdg-desktop-portal-hyprland/)
#    must also be installed!)
#
#  - Notably, global shortcuts have not been implemented on wlroots-based
#    compositors like Sway (see [upstream issue](https://github.com/emersion/xdg-desktop-portal-wlr/issues/240)).
keybind = super+shift+d=new_split:down
keybind = super+enter=toggle_fullscreen
keybind = super+alt+shift+j=write_screen_file:open
keybind = super+2=goto_tab:2
keybind = super+digit_6=goto_tab:6
keybind = super+k=clear_screen
keybind = super+page_down=scroll_page_down
keybind = super+4=goto_tab:4
keybind = super+shift+z=redo
keybind = super+shift+v=paste_from_selection
keybind = super+w=close_surface
keybind = shift+page_down=adjust_selection:page_down
keybind = super+7=goto_tab:7
keybind = shift+arrow_down=adjust_selection:down
keybind = super+bracket_left=goto_split:previous
keybind = super+5=goto_tab:5
keybind = super+3=goto_tab:3
keybind = super+a=select_all
keybind = super+arrow_left=text:\x01
keybind = shift+page_up=adjust_selection:page_up
keybind = super+0=reset_font_size
keybind = super+digit_2=goto_tab:2
keybind = super+shift+bracket_left=previous_tab
keybind = super+shift+,=reload_config
keybind = super+,=open_config
keybind = super+ctrl+shift+j=write_screen_file:copy
keybind = paste=paste_from_clipboard
keybind = super+bracket_right=goto_split:next
keybind = super+alt+arrow_up=goto_split:up
keybind = super+ctrl+arrow_right=resize_split:right,10
keybind = alt+arrow_left=esc:b
keybind = super+equal=increase_font_size:1
keybind = ctrl+tab=next_tab
keybind = super+digit_4=goto_tab:4
keybind = super+q=quit
keybind = super+shift+arrow_up=jump_to_prompt:-1
keybind = super+alt+arrow_right=goto_split:right
keybind = super+ctrl+equal=equalize_splits
keybind = super+digit_7=goto_tab:7
keybind = super+ctrl+f=toggle_fullscreen
keybind = super+backspace=text:\x15
keybind = super+6=goto_tab:6
keybind = super+page_up=scroll_page_up
keybind = super+1=goto_tab:1
keybind = super+alt+w=close_tab:this
keybind = super+end=scroll_to_bottom
keybind = super+-=decrease_font_size:1
keybind = super+arrow_up=jump_to_prompt:-1
keybind = super+shift+t=undo
keybind = super+alt+arrow_left=goto_split:left
keybind = super+z=undo
keybind = super+digit_8=goto_tab:8
keybind = super+9=last_tab
keybind = shift+arrow_up=adjust_selection:up
keybind = super+home=scroll_to_top
keybind = super+digit_1=goto_tab:1
keybind = super+shift+w=close_window
keybind = super+alt+shift+w=close_all_windows
keybind = super+ctrl+arrow_down=resize_split:down,10
keybind = super+t=new_tab
keybind = shift+end=adjust_selection:end
keybind = super+v=paste_from_clipboard
keybind = shift+arrow_right=adjust_selection:right
keybind = super+c=copy_to_clipboard
keybind = super+ctrl+arrow_left=resize_split:left,10
keybind = super+shift+enter=toggle_split_zoom
keybind = super+arrow_right=text:\x05
keybind = super++=increase_font_size:1
keybind = super+shift+p=toggle_command_palette
keybind = super+8=goto_tab:8
keybind = shift+arrow_left=adjust_selection:left
keybind = super+shift+arrow_down=jump_to_prompt:1
keybind = super+alt+arrow_down=goto_split:down
keybind = copy=copy_to_clipboard
keybind = super+shift+j=write_screen_file:paste
keybind = super+shift+bracket_right=next_tab
keybind = super+arrow_down=jump_to_prompt:1
keybind = ctrl+shift+tab=previous_tab
keybind = alt+arrow_right=esc:f
keybind = super+n=new_window
keybind = shift+home=adjust_selection:home
keybind = super+alt+i=inspector:toggle
keybind = super+digit_5=goto_tab:5
keybind = super+digit_3=goto_tab:3
keybind = super+ctrl+arrow_up=resize_split:up,10
keybind = super+d=new_split:right

# Horizontal window padding. This applies padding between the terminal cells
# and the left and right window borders. The value is in points, meaning that
# it will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
#
# To set a different left and right padding, specify two numerical values
# separated by a comma. For example, `window-padding-x = 2,4` will set the
# left padding to 2 and the right padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-x = 2` will set both paddings to 2.
window-padding-x = 2

# Vertical window padding. This applies padding between the terminal cells and
# the top and bottom window borders. The value is in points, meaning that it
# will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
#
# To set a different top and bottom padding, specify two numerical values
# separated by a comma. For example, `window-padding-y = 2,4` will set the
# top padding to 2 and the bottom padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-y = 2` will set both paddings to 2.
window-padding-y = 2

# The viewport dimensions are usually not perfectly divisible by the cell
# size. In this case, some extra padding on the end of a column and the bottom
# of the final row may exist. If this is `true`, then this extra padding
# is automatically balanced between all four edges to minimize imbalance on
# one side. If this is `false`, the top left grid cell will always hug the
# edge with zero padding other than what may be specified with the other
# `window-padding` options.
#
# If other `window-padding` fields are set and this is `true`, this will still
# apply. The other padding is applied first and may affect how many grid cells
# actually exist, and this is applied last in order to balance the padding
# given a certain viewport size and grid cell size.
window-padding-balance = false

# The color of the padding area of the window. Valid values are:
#
# * `background` - The background color specified in `background`.
# * `extend` - Extend the background color of the nearest grid cell.
# * `extend-always` - Same as "extend" but always extends without applying
#   any of the heuristics that disable extending noted below.
#
# The "extend" value will be disabled in certain scenarios. On primary
# screen applications (e.g. not something like Neovim), the color will not
# be extended vertically if any of the following are true:
#
# * The nearest row has any cells that have the default background color.
#   The thinking is that in this case, the default background color looks
#   fine as a padding color.
# * The nearest row is a prompt row (requires shell integration). The
#   thinking here is that prompts often contain powerline glyphs that
#   do not look good extended.
# * The nearest row contains a perfect fit powerline character. These
#   don't look good extended.
window-padding-color = background

# Synchronize rendering with the screen refresh rate. If true, this will
# minimize tearing and align redraws with the screen but may cause input
# latency. If false, this will maximize redraw frequency but may cause tearing,
# and under heavy load may use more CPU and power.
#
# This defaults to true because out-of-sync rendering on macOS can
# cause kernel panics (macOS 14.4+) and performance issues for external
# displays over some hardware such as DisplayLink. If you want to minimize
# input latency, set this to false with the known aforementioned risks.
#
# Changing this value at runtime will only affect new terminals.
#
# This setting is only supported currently on macOS.
window-vsync = true

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously
# focused window. If no window was previously focused, the default font size
# will be used. If this is false, the default font size specified in the
# configuration `font-size` will be used.
window-inherit-font-size = true

# Configure a preference for window decorations. This setting specifies
# a _preference_; the actual OS, desktop environment, window manager, etc.
# may override this preference. Ghostty will do its best to respect this
# preference but it may not always be possible.
#
# Valid values:
#
#  * `none`
#
#    All window decorations will be disabled. Titlebar, borders, etc. will
#    not be shown. On macOS, this will also disable tabs (enforced by the
#    system).
#
#  * `auto`
#
#    Automatically decide to use either client-side or server-side
#    decorations based on the detected preferences of the current OS and
#    desktop environment. This option usually makes Ghostty look the most
#    "native" for your desktop.
#
#  * `client`
#
#    Prefer client-side decorations.
#
#    Available since: 1.1.0
#
#  * `server`
#
#    Prefer server-side decorations. This is only relevant on Linux with GTK,
#    either on X11, or Wayland on a compositor that supports the
#    `org_kde_kwin_server_decoration` protocol (e.g. KDE Plasma, but almost
#    any non-GNOME desktop supports this protocol).
#
#    If `server` is set but the environment doesn't support server-side
#    decorations, client-side decorations will be used instead.
#
#    Available since: 1.1.0
#
# The default value is `auto`.
#
# For the sake of backwards compatibility and convenience, this setting also
# accepts boolean true and false values. If set to `true`, this is equivalent
# to `auto`. If set to `false`, this is equivalent to `none`.
# This is convenient for users who live primarily on systems that don't
# differentiate between client and server-side decorations (e.g. macOS and
# Windows).
#
# The "toggle_window_decorations" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
#
# macOS: To hide the titlebar without removing the native window borders
#        or rounded corners, use `macos-titlebar-style = hidden` instead.
window-decoration = auto

# The font that will be used for the application's window and tab titles.
#
# If this setting is left unset, the system default font will be used.
#
# Note: any font available on the system may be used, this font is not
# required to be a fixed-width font.
#
# Available since: 1.1.0 (on GTK)
window-title-font-family =

# The text that will be displayed in the subtitle of the window. Valid values:
#
#   * `false` - Disable the subtitle.
#   * `working-directory` - Set the subtitle to the working directory of the
#      surface.
#
# This feature is only supported on GTK.
#
# Available since: 1.1.0
window-subtitle = false

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal
#      background color. This has no effect if the "theme" configuration
#      has separate light and dark themes. In that case, the behavior
#      of "auto" is equivalent to "system".
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#   * `ghostty` - Use the background and foreground colors specified in the
#     Ghostty configuration. This is only supported on Linux builds.
#
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = auto

# The color space to use when interpreting terminal colors. "Terminal colors"
# refers to colors specified in your configuration and colors produced by
# direct-color SGR sequences.
#
# Valid values:
#
#   * `srgb` - Interpret colors in the sRGB color space. This is the default.
#   * `display-p3` - Interpret colors in the Display P3 color space.
#
# This setting is currently only supported on macOS.
window-colorspace = srgb

# The initial window size. This size is in terminal grid cells by default.
# Both values must be set to take effect. If only one value is set, it is
# ignored.
#
# We don't currently support specifying a size in pixels but a future change
# can enable that. If this isn't specified, the app runtime will determine
# some default size.
#
# Note that the window manager may put limits on the size or override the
# size. For example, a tiling window manager may force the window to be a
# certain size to fit within the grid. There is nothing Ghostty will do about
# this, but it will make an effort.
#
# Sizes larger than the screen size will be clamped to the screen size.
# This can be used to create a maximized-by-default window size.
#
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window. Changing this
# value will not affect the size of the window after it has been created. This
# is only used for the initial size.
#
# BUG: On Linux with GTK, the calculated window size will not properly take
# into account window decorations. As a result, the grid dimensions will not
# exactly match this configuration. If window decorations are disabled (see
# `window-decoration`), then this will work as expected.
#
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 0

window-width = 0
# The starting window position. This position is in pixels and is relative
# to the top-left corner of the primary monitor. Both values must be set to take
# effect. If only one value is set, it is ignored.
#
# Note that the window manager may put limits on the position or override
# the position. For example, a tiling window manager may force the window
# to be a certain position to fit within the grid. There is nothing Ghostty
# will do about this, but it will make an effort.
#
# Also note that negative values are also up to the operating system and
# window manager. Some window managers may not allow windows to be placed
# off-screen.
#
# Invalid positions are runtime-specific, but generally the positions are
# clamped to the nearest valid position.
#
# On macOS, the window position is relative to the top-left corner of
# the visible screen area. This means that if the menu bar is visible, the
# window will be placed below the menu bar.
#
# Note: this is only supported on macOS. The GTK runtime does not support
# setting the window position, as windows are only allowed position
# themselves in X11 and not Wayland.
window-position-x =

window-position-y =
# Whether to enable saving and restoring window state. Window state includes
# their position, size, tabs, splits, etc. Some window state requires shell
# integration, such as preserving working directories. See `shell-integration`
# for more information.
#
# There are three valid values for this configuration:
#
#   * `default` will use the default system behavior. On macOS, this
#     will only save state if the application is forcibly terminated
#     or if it is configured systemwide via Settings.app.
#
#   * `never` will never save window state.
#
#   * `always` will always save window state whenever Ghostty is exited.
#
# If you change this value to `never` while Ghostty is not running, the next
# Ghostty launch will NOT restore the window state.
#
# If you change this value to `default` while Ghostty is not running and the
# previous exit saved state, the next Ghostty launch will still restore the
# window state. This is because Ghostty cannot know if the previous exit was
# due to a forced save or not (macOS doesn't provide this information).
#
# If you change this value so that window state is saved while Ghostty is not
# running, the previous window state will not be restored because Ghostty only
# saves state on exit if this is enabled.
#
# The default value is `default`.
#
# This is currently only supported on macOS. This has no effect on Linux.
window-save-state = default

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments. Currently
# only supported on macOS.
window-step-resize = false

# The position where new tabs are created. Valid values:
#
#   * `current` - Insert the new tab after the currently focused tab,
#     or at the end if there are no focused tabs.
#
#   * `end` - Insert the new tab at the end of the tab list.
window-new-tab-position = current

# Whether to show the tab bar.
#
# Valid values:
#
#  - `always`
#
#    Always display the tab bar, even when there's only one tab.
#
#    Available since: 1.2.0
#
#  - `auto` *(default)*
#
#    Automatically show and hide the tab bar. The tab bar is only
#    shown when there are two or more tabs present.
#
#  - `never`
#
#    Never show the tab bar. Tabs are only accessible via the tab
#    overview or by keybind actions.
#
# Currently only supported on Linux (GTK).
window-show-tab-bar = auto

# Background color for the window titlebar. This only takes effect if
# window-theme is set to ghostty. Currently only supported in the GTK app
# runtime.
#
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
window-titlebar-background =

# Foreground color for the window titlebar. This only takes effect if
# window-theme is set to ghostty. Currently only supported in the GTK app
# runtime.
#
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
window-titlebar-foreground =

# This controls when resize overlays are shown. Resize overlays are a
# transient popup that shows the size of the terminal while the surfaces are
# being resized. The possible options are:
#
#   * `always` - Always show resize overlays.
#   * `never` - Never show resize overlays.
#   * `after-first` - The resize overlay will not appear when the surface
#                     is first created, but will show up if the surface is
#                     subsequently resized.
#
# The default is `after-first`.
resize-overlay = after-first

# If resize overlays are enabled, this controls the position of the overlay.
# The possible options are:
#
#   * `center`
#   * `top-left`
#   * `top-center`
#   * `top-right`
#   * `bottom-left`
#   * `bottom-center`
#   * `bottom-right`
#
# The default is `center`.
resize-overlay-position = center

# If resize overlays are enabled, this controls how long the overlay is
# visible on the screen before it is hidden. The default is ¾ of a second or
# 750 ms.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
#
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
#
# Available since 1.0.0
resize-overlay-duration = 750ms

# If true, when there are multiple split panes, the mouse selects the pane
# that is focused. This only applies to the currently focused window; e.g.
# mousing over a split in an unfocused window will not focus that split
# and bring the window to front.
#
# Default is false.
focus-follows-mouse = false

# Whether to allow programs running in the terminal to read/write to the
# system clipboard (OSC 52, for googling). The default is to allow clipboard
# reading after prompting the user and allow writing unconditionally.
#
# Valid values are:
#
#   * `ask`
#   * `allow`
#   * `deny`
#
clipboard-read = ask

clipboard-write = allow
# Trims trailing whitespace on data that is copied to the clipboard. This does
# not affect data sent to the clipboard via `clipboard-write`.
clipboard-trim-trailing-spaces = true

# Require confirmation before pasting text that appears unsafe. This helps
# prevent a "copy/paste attack" where a user may accidentally execute unsafe
# commands by pasting text with newlines.
clipboard-paste-protection = true

# If true, bracketed pastes will be considered safe. By default, bracketed
# pastes are considered safe. "Bracketed" pastes are pastes while the running
# program has bracketed paste mode enabled (a setting set by the running
# program, not the terminal emulator).
clipboard-paste-bracketed-safe = true

# Enables or disabled title reporting (CSI 21 t). This escape sequence
# allows the running program to query the terminal title. This is a common
# security issue and is disabled by default.
#
# Warning: This can expose sensitive information at best and enable
# arbitrary code execution at worst (with a maliciously crafted title
# and a minor amount of user interaction).
#
# Available since: 1.0.1
title-report = false

# The total amount of bytes that can be used for image data (e.g. the Kitty
# image protocol) per terminal screen. The maximum value is 4,294,967,295
# (4GiB). The default is 320MB. If this is set to zero, then all image
# protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective
# limit per surface is double.
image-storage-limit = 320000000

# Whether to automatically copy selected text to the clipboard. `true`
# will prefer to copy to the selection clipboard, otherwise it will copy to
# the system clipboard.
#
# The value `clipboard` will always copy text to the selection clipboard
# as well as the system clipboard.
#
# Middle-click paste will always use the selection clipboard. Middle-click
# paste is always enabled even if this is `false`.
#
# The default value is true on Linux and macOS.
copy-on-select = true

# The action to take when the user right-clicks on the terminal surface.
#
# Valid values:
#   * `context-menu` - Show the context menu.
#   * `paste` - Paste the contents of the clipboard.
#   * `copy` - Copy the selected text to the clipboard.
#   * `copy-or-paste` - If there is a selection, copy the selected text to
#      the clipboard; otherwise, paste the contents of the clipboard.
#   * `ignore` - Do nothing, ignore the right-click.
#
# The default value is `context-menu`.
right-click-action = context-menu

# The time in milliseconds between clicks to consider a click a repeat
# (double, triple, etc.) or an entirely new single click. A value of zero will
# use a platform-specific default. The default on macOS is determined by the
# OS settings. On every other platform it is 500ms.
click-repeat-interval = 0

# Additional configuration files to read. This configuration can be repeated
# to read multiple configuration files. Configuration files themselves can
# load more configuration files. Paths are relative to the file containing the
# `config-file` directive. For command-line arguments, paths are relative to
# the current working directory.
#
# Prepend a ? character to the file path to suppress errors if the file does
# not exist. If you want to include a file that begins with a literal ?
# character, surround the file path in double quotes (").
#
# Cycles are not allowed. If a cycle is detected, an error will be logged and
# the configuration file will be ignored.
#
# Configuration files are loaded after the configuration they're defined
# within in the order they're defined. **THIS IS A VERY SUBTLE BUT IMPORTANT
# POINT.** To put it another way: configuration files do not take effect
# until after the entire configuration is loaded. For example, in the
# configuration below:
#
# ```
# config-file = "foo"
# a = 1
# ```
#
# If "foo" contains `a = 2`, the final value of `a` will be 2, because
# `foo` is loaded after the configuration file that configures the
# nested `config-file` value.
config-file =

# When this is true, the default configuration file paths will be loaded.
# The default configuration file paths are currently only the XDG
# config path ($XDG_CONFIG_HOME/ghostty/config).
#
# If this is false, the default configuration paths will not be loaded.
# This is targeted directly at using Ghostty from the CLI in a way
# that minimizes external effects.
#
# This is a CLI-only configuration. Setting this in a configuration file
# will have no effect. It is not an error, but it will not do anything.
# This configuration can only be set via CLI arguments.
config-default-files = true

# Confirms that a surface should be closed before closing it.
#
# This defaults to `true`. If set to `false`, surfaces will close without
# any confirmation. This can also be set to `always`, which will always
# confirm closing a surface, even if shell integration says a process isn't
# running.
confirm-close-surface = true

# Whether or not to quit after the last surface is closed.
#
# This defaults to `false` on macOS since that is standard behavior for
# a macOS application. On Linux, this defaults to `true` since that is
# generally expected behavior.
#
# On Linux, if this is `true`, Ghostty can delay quitting fully until a
# configurable amount of time has passed after the last window is closed.
# See the documentation of `quit-after-last-window-closed-delay`.
quit-after-last-window-closed = false

# Controls how long Ghostty will stay running after the last open surface has
# been closed. This only has an effect if `quit-after-last-window-closed` is
# also set to `true`.
#
# The minimum value for this configuration is `1s`. Any values lower than
# this will be clamped to `1s`.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
#
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
#
# By default `quit-after-last-window-closed-delay` is unset and
# Ghostty will quit immediately after the last window is closed if
# `quit-after-last-window-closed` is `true`.
#
# Only implemented on Linux.
quit-after-last-window-closed-delay =

# This controls whether an initial window is created when Ghostty
# is run. Note that if `quit-after-last-window-closed` is `true` and
# `quit-after-last-window-closed-delay` is set, setting `initial-window` to
# `false` will mean that Ghostty will quit after the configured delay if no
# window is ever created. Only implemented on Linux and macOS.
initial-window = true

# The duration that undo operations remain available. After this
# time, the operation will be removed from the undo stack and
# cannot be undone.
#
# The default value is 5 seconds.
#
# This timeout applies per operation, meaning that if you perform
# multiple operations, each operation will have its own timeout.
# New operations do not reset the timeout of previous operations.
#
# A timeout of zero will effectively disable undo operations. It is
# not possible to set an infinite timeout, but you can set a very
# large timeout to effectively disable the timeout (on the order of years).
# This is highly discouraged, as it will cause the undo stack to grow
# indefinitely, memory usage to grow unbounded, and terminal sessions
# to never actually quit.
#
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
#
# The allowed time units are as follows:
#
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
#
# Examples:
#   * `1h30m`
#   * `45s`
#
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
#
# This configuration is only supported on macOS. Linux doesn't
# support undo operations at all so this configuration has no
# effect.
#
# Available since: 1.2.0
undo-timeout = 5s

# The position of the "quick" terminal window. To learn more about the
# quick terminal, see the documentation for the `toggle_quick_terminal`
# binding action.
#
# Valid values are:
#
#   * `top` - Terminal appears at the top of the screen.
#   * `bottom` - Terminal appears at the bottom of the screen.
#   * `left` - Terminal appears at the left of the screen.
#   * `right` - Terminal appears at the right of the screen.
#   * `center` - Terminal appears at the center of the screen.
#
# On macOS, changing this configuration requires restarting Ghostty
# completely.
#
# Note: There is no default keybind for toggling the quick terminal.
# To enable this feature, bind the `toggle_quick_terminal` action to a key.
quick-terminal-position = top

# The size of the quick terminal.
#
# The size can be specified either as a percentage of the screen dimensions
# (height/width), or as an absolute size in pixels. Percentage values are
# suffixed with `%` (e.g. `20%`) while pixel values are suffixed with `px`
# (e.g. `300px`). A bare value without a suffix is a config error.
#
# When only one size is specified, the size parameter affects the size of
# the quick terminal on its *primary axis*, which depends on its position:
# height for quick terminals placed on the top or bottom, and width for left
# or right. The primary axis of a centered quick terminal depends on the
# monitor's orientation: height when on a landscape monitor, and width when
# on a portrait monitor.
#
# The *secondary axis* would be maximized for non-center positioned
# quick terminals unless another size parameter is specified, separated
# from the first by a comma (`,`). Percentage and pixel sizes can be mixed
# together: for instance, a size of `50%,500px` for a top-positioned quick
# terminal would be half a screen tall, and 500 pixels wide.

# The layer of the quick terminal window. The higher the layer,
# the more windows the quick terminal may conceal.
#
# Valid values are:
#
#  * `overlay`
#
#    The quick terminal appears in front of all windows.
#
#  * `top` (default)
#
#    The quick terminal appears in front of normal windows but behind
#    fullscreen overlays like lock screens.
#
#  * `bottom`
#
#    The quick terminal appears behind normal windows but in front of
#    wallpapers and other windows in the background layer.
#
#  * `background`
#
#    The quick terminal appears behind all windows.
#
# GTK Wayland only.
#
# Available since: 1.2.0
gtk-quick-terminal-layer = top

# The namespace for the quick terminal window.
#
# This is an identifier that is used by the Wayland compositor and/or
# scripts to determine the type of layer surfaces and to possibly apply
# unique effects.
#
# GTK Wayland only.
#
# Available since: 1.2.0
gtk-quick-terminal-namespace = ghostty-quick-terminal

# The screen where the quick terminal should show up.
#
# Valid values are:
#
#  * `main` - The screen that the operating system recommends as the main
#    screen. On macOS, this is the screen that is currently receiving
#    keyboard input. This screen is defined by the operating system and
#    not chosen by Ghostty.
#
#  * `mouse` - The screen that the mouse is currently hovered over.
#
#  * `macos-menu-bar` - The screen that contains the macOS menu bar as
#    set in the display settings on macOS. This is a bit confusing because
#    every screen on macOS has a menu bar, but this is the screen that
#    contains the primary menu bar.
#
# The default value is `main` because this is the recommended screen
# by the operating system.
#
# Only implemented on macOS.
quick-terminal-screen = main

# Duration (in seconds) of the quick terminal enter and exit animation.
# Set it to 0 to disable animation completely. This can be changed at
# runtime.
#
# Only implemented on macOS.
quick-terminal-animation-duration = 0.2

# Automatically hide the quick terminal when focus shifts to another window.
# Set it to false for the quick terminal to remain open even when it loses focus.
#
# Defaults to true on macOS and on false on Linux/BSD. This is because global
# shortcuts on Linux require system configuration and are considerably less
# accessible than on macOS, meaning that it is more preferable to keep the
# quick terminal open until the user has completed their task.
# This default may change in the future.
quick-terminal-autohide = true

# This configuration option determines the behavior of the quick terminal
# when switching between macOS spaces. macOS spaces are virtual desktops
# that can be manually created or are automatically created when an
# application is in full-screen mode.
#
# Valid values are:
#
#  * `move` - When switching to another space, the quick terminal will
#    also moved to the current space.
#
#  * `remain` - The quick terminal will stay only in the space where it
#    was originally opened and will not follow when switching to another
#    space.
#
# The default value is `move`.
#
# Only implemented on macOS.
# On Linux the behavior is always equivalent to `move`.
#
# Available since: 1.1.0
quick-terminal-space-behavior = move

# Determines under which circumstances that the quick terminal should receive
# keyboard input. See the corresponding [Wayland documentation](https://wayland.app/protocols/wlr-layer-shell-unstable-v1#zwlr_layer_surface_v1:enum:keyboard_interactivity)
# for a more detailed explanation of the behavior of each option.
#
# > [!NOTE]
# > The exact behavior of each option may differ significantly across
# > compositors -- experiment with them on your system to find one that
# > suits your liking!
#
# Valid values are:
#
#  * `none`
#
#    The quick terminal will not receive any keyboard input.
#
#  * `on-demand` (default)
#
#    The quick terminal would only receive keyboard input when it is focused.
#
#  * `exclusive`
#
#    The quick terminal will always receive keyboard input, even when another
#    window is currently focused.
#
# Only has an effect on Linux Wayland.
# On macOS the behavior is always equivalent to `on-demand`.
#
# Available since: 1.2.0
quick-terminal-keyboard-interactivity = on-demand

# Whether to enable shell integration auto-injection or not. Shell integration
# greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs, splits inherit the
#     previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask
#     for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much
#     better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = detect

# Shell integration features to enable. These require our shell integration
# to be loaded, either automatically via shell-integration or manually.
#
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want. You can also use `true` or `false` to turn all features on or off.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
#   * `ssh-env` - Enable SSH environment variable compatibility. Automatically
#     converts TERM from `xterm-ghostty` to `xterm-256color` when connecting to
#     remote hosts and propagates COLORTERM, TERM_PROGRAM, and TERM_PROGRAM_VERSION.
#     Whether or not these variables will be accepted by the remote host(s) will
#     depend on whether or not the variables are allowed in their sshd_config.
#     (Available since: 1.2.0)
#
#   * `ssh-terminfo` - Enable automatic terminfo installation on remote hosts.
#     Attempts to install Ghostty's terminfo entry using `infocmp` and `tic` when
#     connecting to hosts that lack it. Requires `infocmp` to be available locally
#     and `tic` to be available on remote hosts. Once terminfo is installed on a
#     remote host, it will be automatically "cached" to avoid repeat installations.
#     If desired, the `+ssh-cache` CLI action can be used to manage the installation
#     cache manually using various arguments.
#     (Available since: 1.2.0)
#
# SSH features work independently and can be combined for optimal experience:
# when both `ssh-env` and `ssh-terminfo` are enabled, Ghostty will install its
# terminfo on remote hosts and use `xterm-ghostty` as TERM, falling back to
# `xterm-256color` with environment variables if terminfo installation fails.
shell-integration-features = cursor,no-sudo,title,no-ssh-env,no-ssh-terminfo

# Custom entries into the command palette.
#
# Each entry requires the title, the corresponding action, and an optional
# description. Each field should be prefixed with the field name, a colon
# (`:`), and then the specified value. The syntax for actions is identical
# to the one for keybind actions. Whitespace in between fields is ignored.
#
# ```ini
# command-palette-entry = title:Reset Font Style, action:csi:0m
# command-palette-entry = title:Crash on Main Thread,description:Causes a crash on the main (UI) thread.,action:crash:main
# ```
#
# By default, the command palette is preloaded with most actions that might
# be useful in an interactive setting yet do not have easily accessible or
# memorizable shortcuts. The default entries can be cleared by setting this
# setting to an empty value:
#
# ```ini
# command-palette-entry =
# ```
#
# Available since: 1.2.0
command-palette-entry = title:Change Title...,description:Prompt for a new title for the current terminal.,action:prompt_surface_title
command-palette-entry = title:Check for Updates,description:Check for updates to the application.,action:check_for_updates
command-palette-entry = title:Clear Screen,description:Clear the screen and scrollback.,action:clear_screen
command-palette-entry = title:Close All Windows,description:Close all windows.,action:close_all_windows
command-palette-entry = title:Close Other Tabs,description:Close all tabs in this window except the current one.,action:close_tab:other
command-palette-entry = title:Close Tab,description:Close the current tab.,action:close_tab:this
command-palette-entry = title:Close Terminal,description:Close the current terminal.,action:close_surface
command-palette-entry = title:Close Window,description:Close the current window.,action:close_window
command-palette-entry = title:Copy Screen to Temporary File and Copy Path,description:Copy the screen contents to a temporary file and copy the path to the clipboard.,action:write_screen_file:copy
command-palette-entry = title:Copy Screen to Temporary File and Open,description:Copy the screen contents to a temporary file and open it.,action:write_screen_file:open
command-palette-entry = title:Copy Screen to Temporary File and Paste Path,description:Copy the screen contents to a temporary file and paste the path to the file.,action:write_screen_file:paste
command-palette-entry = title:Copy Selection to Temporary File and Copy Path,description:Copy the selection contents to a temporary file and copy the path to the clipboard.,action:write_selection_file:copy
command-palette-entry = title:Copy Selection to Temporary File and Open,description:Copy the selection contents to a temporary file and open it.,action:write_selection_file:open
command-palette-entry = title:Copy Selection to Temporary File and Paste Path,description:Copy the selection contents to a temporary file and paste the path to the file.,action:write_selection_file:paste
command-palette-entry = title:Copy Terminal Title to Clipboard,description:Copy the terminal title to the clipboard. If the terminal title is not set this has no effect.,action:copy_title_to_clipboard
command-palette-entry = title:Copy to Clipboard,description:Copy the selected text to the clipboard.,action:copy_to_clipboard
command-palette-entry = title:Copy URL to Clipboard,description:Copy the URL under the cursor to the clipboard.,action:copy_url_to_clipboard
command-palette-entry = title:Decrease Font Size,description:Decrease the font size by 1 point.,action:decrease_font_size:1
command-palette-entry = title:Equalize Splits,description:Equalize the size of all splits.,action:equalize_splits
command-palette-entry = title:Focus Split: Down,description:Focus the split below, if it exists.,action:goto_split:down
command-palette-entry = title:Focus Split: Left,description:Focus the split to the left, if it exists.,action:goto_split:left
command-palette-entry = title:Focus Split: Next,description:Focus the next split, if any.,action:goto_split:next
command-palette-entry = title:Focus Split: Previous,description:Focus the previous split, if any.,action:goto_split:previous
command-palette-entry = title:Focus Split: Right,description:Focus the split to the right, if it exists.,action:goto_split:right
command-palette-entry = title:Focus Split: Up,description:Focus the split above, if it exists.,action:goto_split:up
command-palette-entry = title:Increase Font Size,description:Increase the font size by 1 point.,action:increase_font_size:1
command-palette-entry = title:Move Tab Left,description:Move the current tab to the left.,action:move_tab:-1
command-palette-entry = title:Move Tab Right,description:Move the current tab to the right.,action:move_tab:1
command-palette-entry = title:New Tab,description:Open a new tab.,action:new_tab
command-palette-entry = title:New Window,description:Open a new window.,action:new_window
command-palette-entry = title:Open Config,description:Open the config file.,action:open_config
command-palette-entry = title:Paste from Clipboard,description:Paste the contents of the main clipboard.,action:paste_from_clipboard
command-palette-entry = title:Paste from Selection,description:Paste the contents of the selection clipboard.,action:paste_from_selection
command-palette-entry = title:Quit,description:Quit the application.,action:quit
command-palette-entry = title:Redo,description:Redo the last undone action.,action:redo
command-palette-entry = title:Reload Config,description:Reload the config file.,action:reload_config
command-palette-entry = title:Reset Font Size,description:Reset the font size to the default.,action:reset_font_size
command-palette-entry = title:Reset Terminal,description:Reset the terminal to a clean state.,action:reset
command-palette-entry = title:Reset Window Size,description:Reset the window size to the default.,action:reset_window_size
command-palette-entry = title:Scroll Page Down,description:Scroll the screen down by a page.,action:scroll_page_down
command-palette-entry = title:Scroll Page Up,description:Scroll the screen up by a page.,action:scroll_page_up
command-palette-entry = title:Scroll to Bottom,description:Scroll to the bottom of the screen.,action:scroll_to_bottom
command-palette-entry = title:Scroll to Selection,description:Scroll to the selected text.,action:scroll_to_selection
command-palette-entry = title:Scroll to Top,description:Scroll to the top of the screen.,action:scroll_to_top
command-palette-entry = title:Select All,description:Select all text on the screen.,action:select_all
command-palette-entry = title:Show On-Screen Keyboard,description:Show the on-screen keyboard if present.,action:show_on_screen_keyboard
command-palette-entry = title:Show the GTK Inspector,description:Show the GTK inspector.,action:show_gtk_inspector
command-palette-entry = title:Split Down,description:Split the terminal down.,action:new_split:down
command-palette-entry = title:Split Left,description:Split the terminal to the left.,action:new_split:left
command-palette-entry = title:Split Right,description:Split the terminal to the right.,action:new_split:right
command-palette-entry = title:Split Up,description:Split the terminal up.,action:new_split:up
command-palette-entry = title:Toggle Float on Top,description:Toggle the float on top state of the current window.,action:toggle_window_float_on_top
command-palette-entry = title:Toggle Fullscreen,description:Toggle the fullscreen state of the current window.,action:toggle_fullscreen
command-palette-entry = title:Toggle Inspector,description:Toggle the inspector.,action:inspector:toggle
command-palette-entry = title:Toggle Maximize,description:Toggle the maximized state of the current window.,action:toggle_maximize
command-palette-entry = title:Toggle Secure Input,description:Toggle secure input mode.,action:toggle_secure_input
command-palette-entry = title:Toggle Split Zoom,description:Toggle the zoom state of the current split.,action:toggle_split_zoom
command-palette-entry = title:Toggle Tab Overview,description:Toggle the tab overview.,action:toggle_tab_overview
command-palette-entry = title:Toggle Window Decorations,description:Toggle the window decorations.,action:toggle_window_decorations
command-palette-entry = title:Undo,description:Undo the last action.,action:undo

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground), OSC 11 (background), and
# OSC 4 (256 color palette) queries, and by default the reported values
# are scaled-up RGB values, where each component are 16 bits. This is how
# most terminals report these values. However, some legacy applications may
# require 8-bit, unscaled, components. We also support turning off reporting
# altogether. The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, e.g. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# If true, allows the "KAM" mode (ANSI mode 2) to be used within
# the terminal. KAM disables keyboard input at the request of the
# application. This is not a common feature and is not recommended
# to be enabled. This will not be documented further because
# if you know you need KAM, you know. If you don't know if you
# need KAM, you don't need it.
vt-kam-allowed = false

# Custom shaders to run after the default shaders. This is a file path
# to a GLSL-syntax shader for all platforms.
#
# Warning: Invalid shaders can cause Ghostty to become unusable such as by
# causing the window to be completely black. If this happens, you can
# unset this configuration to disable the shader.
#
# Custom shader support is based on and compatible with the Shadertoy shaders.
# Shaders should specify a `mainImage` function and the available uniforms
# largely match Shadertoy, with some caveats and Ghostty-specific extensions.
#
# The uniform values available to shaders are as follows:
#
#  * `sampler2D iChannel0` - Input texture.
#
#    A texture containing the current terminal screen. If multiple custom
#    shaders are specified, the output of previous shaders is written to
#    this texture, to allow combining multiple effects.
#
#  * `vec3 iResolution` - Output texture size, `[width, height, 1]` (in px).
#
#  * `float iTime` - Time in seconds since first frame was rendered.
#
#  * `float iTimeDelta` - Time in seconds since previous frame was rendered.
#
#  * `float iFrameRate` - Average framerate. (NOT CURRENTLY SUPPORTED)
#
#  * `int iFrame` - Number of frames that have been rendered so far.
#
#  * `float iChannelTime[4]` - Current time for video or sound input. (N/A)
#
#  * `vec3 iChannelResolution[4]` - Resolutions of the 4 input samplers.
#
#    Currently only `iChannel0` exists, and `iChannelResolution[0]` is
#    identical to `iResolution`.
#
#  * `vec4 iMouse` - Mouse input info. (NOT CURRENTLY SUPPORTED)
#
#  * `vec4 iDate` - Date/time info. (NOT CURRENTLY SUPPORTED)
#
#  * `float iSampleRate` - Sample rate for audio. (N/A)
#
# Ghostty-specific extensions:
#
#  * `vec4 iCurrentCursor` - Info about the terminal cursor.
#
#    - `iCurrentCursor.xy` is the -X, +Y corner of the current cursor.
#    - `iCurrentCursor.zw` is the width and height of the current cursor.
#
#  * `vec4 iPreviousCursor` - Info about the previous terminal cursor.
#
#  * `vec4 iCurrentCursorColor` - Color of the terminal cursor.
#
#  * `vec4 iPreviousCursorColor` - Color of the previous terminal cursor.
#
#  * `float iTimeCursorChange` - Timestamp of terminal cursor change.
#
#    When the terminal cursor changes position or color, this is set to
#    the same time as the `iTime` uniform, allowing you to compute the
#    time since the change by subtracting this from `iTime`.
#
# If the shader fails to compile, the shader will be ignored. Any errors
# related to shader compilation will not show up as configuration errors
# and only show up in the log, since shader compilation happens after
# configuration loading on the dedicated render thread.  For interactive
# development, use [shadertoy.com](https://shadertoy.com).
#
# This can be repeated multiple times to load multiple shaders. The shaders
# will be run in the order they are specified.
#
# This can be changed at runtime and will affect all open terminals.
custom-shader =

# If `true` (default), the focused terminal surface will run an animation
# loop when custom shaders are used. This uses slightly more CPU (generally
# less than 10%) but allows the shader to animate. This only runs if there
# are custom shaders and the terminal is focused.
#
# If this is set to `false`, the terminal and custom shader will only render
# when the terminal is updated. This is more efficient but the shader will
# not animate.
#
# This can also be set to `always`, which will always run the animation
# loop regardless of whether the terminal is focused or not. The animation
# loop will still only run when custom shaders are used. Note that this
# will use more CPU per terminal surface and can become quite expensive
# depending on the shader and your terminal usage.
#
# This can be changed at runtime and will affect all open terminals.
custom-shader-animation = true

# Bell features to enable if bell support is available in your runtime. Not
# all features are available on all runtimes. The format of this is a list of
# features to enable separated by commas. If you prefix a feature with `no-`
# then it is disabled. If you omit a feature, its default value is used.
#
# Valid values are:
#
#  * `system`
#
#    Instruct the system to notify the user using built-in system functions.
#    This could result in an audiovisual effect, a notification, or something
#    else entirely. Changing these effects require altering system settings:
#    for instance under the "Sound > Alert Sound" setting in GNOME,
#    or the "Accessibility > System Bell" settings in KDE Plasma. (GTK only)
#
#  * `audio`
#
#    Play a custom sound. (GTK only)
#
#  * `attention` *(enabled by default)*
#
#    Request the user's attention when Ghostty is unfocused, until it has
#    received focus again. On macOS, this will bounce the app icon in the
#    dock once. On Linux, the behavior depends on the desktop environment
#    and/or the window manager/compositor:
#
#    - On KDE, the background of the desktop icon in the task bar would be
#      highlighted;
#
#    - On GNOME, you may receive a notification that, when clicked, would
#      bring the Ghostty window into focus;
#
#    - On Sway, the window may be decorated with a distinctly colored border;
#
#    - On other systems this may have no effect at all.
#
#  * `title` *(enabled by default)*
#
#    Prepend a bell emoji (🔔) to the title of the alerted surface until the
#    terminal is re-focused or interacted with (such as on keyboard input).
#
#  * `border`
#
#    Display a border around the alerted surface until the terminal is
#    re-focused or interacted with (such as on keyboard input).
#
#    GTK only.
#
# Example: `audio`, `no-audio`, `system`, `no-system`
#
# Available since: 1.2.0
bell-features = no-system,no-audio,attention,title,no-border

# If `audio` is an enabled bell feature, this is a path to an audio file. If
# the path is not absolute, it is considered relative to the directory of the
# configuration file that it is referenced from, or from the current working
# directory if this is used as a CLI flag. The path may be prefixed with `~/`
# to reference the user's home directory. (GTK only)
#
# Available since: 1.2.0
bell-audio-path =

# If `audio` is an enabled bell feature, this is the volume to play the audio
# file at (relative to the system volume). This is a floating point number
# ranging from 0.0 (silence) to 1.0 (as loud as possible). The default is 0.5.
# (GTK only)
#
# Available since: 1.2.0
bell-audio-volume = 0.5

# Control the in-app notifications that Ghostty shows.
#
# On Linux (GTK), in-app notifications show up as toasts. Toasts appear
# overlaid on top of the terminal window. They are used to show information
# that is not critical but may be important.
#
# Possible notifications are:
#
#   - `clipboard-copy` (default: true) - Show a notification when text is copied
#     to the clipboard.
#   - `config-reload` (default: true) - Show a notification when
#     the configuration is reloaded.
#
# To specify a notification to enable, specify the name of the notification.
# To specify a notification to disable, prefix the name with `no-`. For
# example, to disable `clipboard-copy`, set this configuration to
# `no-clipboard-copy`. To enable it, set this configuration to `clipboard-copy`.
#
# Multiple notifications can be enabled or disabled by separating them
# with a comma.
#
# A value of "false" will disable all notifications. A value of "true" will
# enable all notifications.
#
# This configuration only applies to GTK.
#
# Available since: 1.1.0
app-notifications = clipboard-copy,config-reload

# If anything other than false, fullscreen mode on macOS will not use the
# native fullscreen, but make the window fullscreen without animations and
# using a new space. It's faster than the native fullscreen mode since it
# doesn't use animations.
#
# Important: tabs DO NOT WORK in this mode. Non-native fullscreen removes
# the titlebar and macOS native tabs require the titlebar. If you use tabs,
# you should not use this mode.
#
# If you fullscreen a window with tabs, the currently focused tab will
# become fullscreen while the others will remain in a separate window in
# the background. You can switch to that window using normal window-switching
# keybindings such as command+tilde. When you exit fullscreen, the window
# will return to the tabbed state it was in before.
#
# Allowable values are:
#
#   * `true` - Use non-native macOS fullscreen, hide the menu bar
#   * `false` - Use native macOS fullscreen
#   * `visible-menu` - Use non-native macOS fullscreen, keep the menu bar
#     visible
#   * `padded-notch` - Use non-native macOS fullscreen, hide the menu bar,
#     but ensure the window is not obscured by the notch on applicable
#     devices. The area around the notch will remain transparent currently,
#     but in the future we may fill it with the window background color.
#
# Changing this option at runtime works, but will only apply to the next
# time the window is made fullscreen. If a window is already fullscreen,
# it will retain the previous setting until fullscreen is exited.
macos-non-native-fullscreen = false

# Whether the window buttons in the macOS titlebar are visible. The window
# buttons are the colored buttons in the upper left corner of most macOS apps,
# also known as the traffic lights, that allow you to close, miniaturize, and
# zoom the window.
#
# This setting has no effect when `window-decoration = false` or
# `macos-titlebar-style = hidden`, as the window buttons are always hidden in
# these modes.
#
# Valid values are:
#
#   * `visible` - Show the window buttons.
#   * `hidden` - Hide the window buttons.
#
# The default value is `visible`.
#
# Changing this option at runtime only applies to new windows.
#
# Available since: 1.2.0
macos-window-buttons = visible

# The style of the macOS titlebar. Available values are: "native",
# "transparent", "tabs", and "hidden".
#
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
#
# The "transparent" style is the same as "native" but the titlebar will
# be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less
# typical for a macOS application and may not work well with all themes.
#
# The "transparent" style will also update in real-time to dynamic
# changes to the window background color, e.g. via OSC 11. To make this
# more aesthetically pleasing, this only happens if the terminal is
# a window, tab, or split that borders the top of the window. This
# avoids a disjointed appearance where the titlebar color changes
# but all the topmost terminals don't match.
#
# The "tabs" style is a completely custom titlebar that integrates the
# tab bar into the titlebar. This titlebar always matches the background
# color of the terminal. There are some limitations to this style:
# On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not
# been tested.
#
# The "hidden" style hides the titlebar. Unlike `window-decoration = false`,
# however, it does not remove the frame from the window or cause it to have
# squared corners. Changing to or from this option at run-time may affect
# existing windows in buggy ways.
#
# When "hidden", the top titlebar area can no longer be used for dragging
# the window. To drag the window, you can use option+click on the resizable
# areas of the frame to drag the window. This is a standard macOS behavior
# and not something Ghostty enables.
#
# The default value is "transparent". This is an opinionated choice
# but its one I think is the most aesthetically pleasing and works in
# most cases.
#
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = transparent

# Whether the proxy icon in the macOS titlebar is visible. The proxy icon
# is the icon that represents the folder of the current working directory.
# You can see this very clearly in the macOS built-in Terminal.app
# titlebar.
#
# The proxy icon is only visible with the native macOS titlebar style.
#
# Valid values are:
#
#   * `visible` - Show the proxy icon.
#   * `hidden` - Hide the proxy icon.
#
# The default value is `visible`.
#
# This setting can be changed at runtime and will affect all currently
# open windows but only after their working directory changes again.
# Therefore, to make this work after changing the setting, you must
# usually `cd` to a different directory, open a different file in an
# editor, etc.
macos-titlebar-proxy-icon = visible

# Controls the windowing behavior when dropping a file or folder
# onto the Ghostty icon in the macOS dock.
#
# Valid values are:
#
#   * `new-tab` - Create a new tab in the current window, or open
#     a new window if none exist.
#   * `new-window` - Create a new window unconditionally.
#
# The default value is `new-tab`.
#
# This setting is only supported on macOS and has no effect on other
# platforms.
macos-dock-drop-behavior = new-tab

# macOS doesn't have a distinct "alt" key and instead has the "option"
# key which behaves slightly differently. On macOS by default, the
# option key plus a character will sometimes produce a Unicode character.
# For example, on US standard layouts option-b produces "∫". This may be
# undesirable if you want to use "option" as an "alt" key for keybindings
# in terminal programs or shells.
#
# This configuration lets you change the behavior so that option is treated
# as alt.
#
# The default behavior (unset) will depend on your active keyboard
# layout. If your keyboard layout is one of the keyboard layouts listed
# below, then the default value is "true". Otherwise, the default
# value is "false". Keyboard layouts with a default value of "true" are:
#
#   - U.S. Standard
#   - U.S. International
#
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (e.g. `alt+ctrl+a`).
#
# Explicit values that can be set:
#
# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key.
#
# You may set this to `false` to restore the macOS *Alt* key unicode
# sequences but this will break terminal sequences expecting *Alt* to work.
#
# The values `left` or `right` enable this for the left or right *Option*
# key, respectively.
macos-option-as-alt =

# Whether to enable the macOS window shadow. The default value is true.
# With some window managers and window transparency settings, you may
# find false more visually appealing.
macos-window-shadow = true

# If true, the macOS icon in the dock and app switcher will be hidden. This is
# mainly intended for those primarily using the quick-terminal mode.
#
# Note that setting this to true means that keyboard layout changes
# will no longer be automatic.
#
# Control whether macOS app is excluded from the dock and app switcher,
# a "hidden" state. This is mainly intended for those primarily using
# quick-terminal mode, but is a general configuration for any use
# case.
#
# Available values:
#
#   * `never` - The macOS app is never hidden.
#   * `always` - The macOS app is always hidden.
#
# Note: When the macOS application is hidden, keyboard layout changes
# will no longer be automatic. This is a limitation of macOS.
#
# Available since: 1.2.0
macos-hidden = never

# If true, Ghostty on macOS will automatically enable the "Secure Input"
# feature when it detects that a password prompt is being displayed.
#
# "Secure Input" is a macOS security feature that prevents applications from
# reading keyboard events. This can always be enabled manually using the
# `Ghostty > Secure Keyboard Entry` menu item.
#
# Note that automatic password prompt detection is based on heuristics
# and may not always work as expected. Specifically, it does not work
# over SSH connections, but there may be other cases where it also
# doesn't work.
#
# A reason to disable this feature is if you find that it is interfering
# with legitimate accessibility software (or software that uses the
# accessibility APIs), since secure input prevents any application from
# reading keyboard events.
macos-auto-secure-input = true

# If true, Ghostty will show a graphical indication when secure input is
# enabled. This indication is generally recommended to know when secure input
# is enabled.
#
# Normally, secure input is only active when a password prompt is displayed
# or it is manually (and typically temporarily) enabled. However, if you
# always have secure input enabled, the indication can be distracting and
# you may want to disable it.
macos-secure-input-indication = true

# Customize the macOS app icon.
#
# This only affects the icon that appears in the dock, application
# switcher, etc. This does not affect the icon in Finder because
# that is controlled by a hardcoded value in the signed application
# bundle and can't be changed at runtime. For more details on what
# exactly is affected, see the `NSApplication.icon` Apple documentation;
# that is the API that is being used to set the icon.
#
# Valid values:
#
#  * `official` - Use the official Ghostty icon.
#  * `blueprint`, `chalkboard`, `microchip`, `glass`, `holographic`,
#    `paper`, `retro`, `xray` - Official variants of the Ghostty icon
#    hand-created by artists (no AI).
#  * `custom` - Use a completely custom icon. The location must be specified
#    using the additional `macos-custom-icon` configuration
#  * `custom-style` - Use the official Ghostty icon but with custom
#    styles applied to various layers. The custom styles must be
#    specified using the additional `macos-icon`-prefixed configurations.
#    The `macos-icon-ghost-color` and `macos-icon-screen-color`
#    configurations are required for this style.
#
# WARNING: The `custom-style` option is _experimental_. We may change
# the format of the custom styles in the future. We're still finalizing
# the exact layers and customization options that will be available.
#
# Other caveats:
#
#   * The icon in the update dialog will always be the official icon.
#     This is because the update dialog is managed through a
#     separate framework and cannot be customized without significant
#     effort.
macos-icon = official

# The absolute path to the custom icon file.
# Supported formats include PNG, JPEG, and ICNS.
#
# Defaults to `~/.config/ghostty/Ghostty.icns`
#
# Note: This configuration is required when `macos-icon` is set to
# `custom`
macos-custom-icon =

# The material to use for the frame of the macOS app icon.
#
# Valid values:
#
#  * `aluminum` - A brushed aluminum frame. This is the default.
#  * `beige` - A classic 90's computer beige frame.
#  * `plastic` - A glossy, dark plastic frame.
#  * `chrome` - A shiny chrome frame.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
macos-icon-frame = aluminum

# The color of the ghost in the macOS app icon.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
#
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
macos-icon-ghost-color =

# The color of the screen in the macOS app icon.
#
# The screen is a linear gradient so you can specify multiple colors
# that make up the gradient. Up to 64 comma-separated colors may be
# specified as either hex (`#RRGGBB` or `RRGGBB`) or as named X11
# colors. The first color is the bottom of the gradient and the last
# color is the top of the gradient.
#
# Note: This configuration is required when `macos-icon` is set to
# `custom-style`.
macos-icon-screen-color =

# Whether macOS Shortcuts are allowed to control Ghostty.
#
# Ghostty exposes a number of actions that allow Shortcuts to
# control and interact with Ghostty. This includes creating new
# terminals, sending text to terminals, running commands, invoking
# any keybind action, etc.
#
# This is a powerful feature but can be a security risk if a malicious
# shortcut is able to be installed and executed. Therefore, this
# configuration allows you to disable this feature.
#
# Valid values are:
#
# * `ask` - Ask the user whether for permission. Ghostty will remember
#   this choice and never ask again. This is similar to other macOS
#   permissions such as microphone access, camera access, etc.
#
# * `allow` - Allow Shortcuts to control Ghostty without asking.
#
# * `deny` - Deny Shortcuts from controlling Ghostty.
#
# Available since: 1.2.0
macos-shortcuts = ask

# Put every surface (tab, split, window) into a dedicated Linux cgroup.
#
# This makes it so that resource management can be done on a per-surface
# granularity. For example, if a shell program is using too much memory,
# only that shell will be killed by the oom monitor instead of the entire
# Ghostty process. Similarly, if a shell program is using too much CPU,
# only that surface will be CPU-throttled.
#
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode, only
# one instance of Ghostty is running (see gtk-single-instance) so the startup
# time is a one-time cost. Additionally, single instance Ghostty is much
# more likely to have many windows, tabs, etc. so cgroup isolation is a
# big benefit.
#
# This feature requires systemd. If systemd is unavailable, cgroup
# initialization will fail. By default, this will not prevent Ghostty
# from working (see linux-cgroup-hard-fail).
#
# Valid values are:
#
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched
#     as single-instance applications (see gtk-single-instance).
linux-cgroup = never

# Memory limit for any individual terminal process (tab, split, window,
# etc.) in bytes. If this is unset then no memory limit will be set.
#
# Note that this sets the "memory.high" configuration for the memory
# controller, which is a soft limit. You should configure something like
# systemd-oom to handle killing processes that have too much memory
# pressure.
linux-cgroup-memory-limit =

# Number of processes limit for any individual terminal process (tab, split,
# window, etc.). If this is unset then no limit will be set.
#
# Note that this sets the "pids.max" configuration for the process number
# controller, which is a hard limit.
linux-cgroup-processes-limit =

# If this is false, then any cgroup initialization (for linux-cgroup)
# will be allowed to fail and the failure is ignored. This is useful if
# you view cgroup isolation as a "nice to have" and not a critical resource
# management feature, because Ghostty startup will not fail if cgroup APIs
# fail.
#
# If this is true, then any cgroup initialization failure will cause
# Ghostty to exit or new surfaces to not be created.
#
# Note: This currently only affects cgroup initialization. Subprocesses
# must always be able to move themselves into an isolated cgroup.
linux-cgroup-hard-fail = false

# Enable or disable GTK's OpenGL debugging logs. The default is `true` for
# debug builds, `false` for all others.
#
# Available since: 1.1.0
gtk-opengl-debug = false

# If `true`, the Ghostty GTK application will run in single-instance mode:
# each new `ghostty` process launched will result in a new window if there is
# already a running process.
#
# If `false`, each new ghostty process will launch a separate application.
#
# If `detect`, Ghostty will assume true (single instance) unless one of
# the following scenarios is found:
#
# 1. TERM_PROGRAM environment variable is a non-empty value. In this
# case, we assume Ghostty is being launched from a graphical terminal
# session and you want a dedicated instance.
#
# 2. Any CLI arguments exist. In this case, we assume you are passing
# custom Ghostty configuration. Single instance mode inherits the
# configuration from when it was launched, so we must disable single
# instance to load the new configuration.
#
# If either of these scenarios is producing a false positive, you can
# set this configuration explicitly to the behavior you want.
#
# The pre-1.2 option `desktop` has been deprecated. Please replace
# this with `detect`.
#
# The default value is `detect`.
#
# Note that debug builds of Ghostty have a separate single-instance ID
# so you can test single instance without conflicting with release builds.
gtk-single-instance = detect

# When enabled, the full GTK titlebar is displayed instead of your window
# manager's simple titlebar. The behavior of this option will vary with your
# window manager.
#
# This option does nothing when `window-decoration` is false or when running
# under macOS.
gtk-titlebar = true

# Determines the side of the screen that the GTK tab bar will stick to.
# Top, bottom, and hidden are supported. The default is top.
#
# When `hidden` is set, a tab button displaying the number of tabs will appear
# in the title bar. It has the ability to open a tab overview for displaying
# tabs. Alternatively, you can use the `toggle_tab_overview` action in a
# keybind if your window doesn't have a title bar, or you can switch tabs
# with keybinds.
gtk-tabs-location = top

# If this is `true`, the titlebar will be hidden when the window is maximized,
# and shown when the titlebar is unmaximized. GTK only.
#
# Available since: 1.1.0
gtk-titlebar-hide-when-maximized = false

# Determines the appearance of the top and bottom bars tab bar.
#
# Valid values are:
#
#  * `flat` - Top and bottom bars are flat with the terminal window.
#  * `raised` - Top and bottom bars cast a shadow on the terminal area.
#  * `raised-border` - Similar to `raised` but the shadow is replaced with a
#    more subtle border.
gtk-toolbar-style = raised

# The style of the GTK titlbar. Available values are `native` and `tabs`.
#
# The `native` titlebar style is a traditional titlebar with a title, a few
# buttons and window controls. A separate tab bar will show up below the
# titlebar if you have multiple tabs open in the window.
#
# The `tabs` titlebar merges the tab bar and the traditional titlebar.
# This frees up vertical space on your screen if you use multiple tabs. One
# limitation of the `tabs` titlebar is that you cannot drag the titlebar
# by the titles any longer (as they are tab titles now). Other areas of the
# `tabs` title bar can be used to drag the window around.
#
# The default style is `native`.
gtk-titlebar-style = native

# If `true` (default), then the Ghostty GTK tabs will be "wide." Wide tabs
# are the new typical Gnome style where tabs fill their available space.
# If you set this to `false` then tabs will only take up space they need,
# which is the old style.
gtk-wide-tabs = true

# Custom CSS files to be loaded.
#
# GTK CSS documentation can be found at the following links:
#
#   * https://docs.gtk.org/gtk4/css-overview.html - An overview of GTK CSS.
#   * https://docs.gtk.org/gtk4/css-properties.html - A comprehensive list
#     of supported CSS properties.
#
# Launch Ghostty with `env GTK_DEBUG=interactive ghostty` to tweak Ghostty's
# CSS in real time using the GTK Inspector. Errors in your CSS files would
# also be reported in the terminal you started Ghostty from. See
# https://developer.gnome.org/documentation/tools/inspector.html for more
# information about the GTK Inspector.
#
# This configuration can be repeated multiple times to load multiple files.
# Prepend a ? character to the file path to suppress errors if the file does
# not exist. If you want to include a file that begins with a literal ?
# character, surround the file path in double quotes (").
# The file size limit for a single stylesheet is 5MiB.
#
# Available since: 1.1.0
gtk-custom-css =

# If `true` (default), applications running in the terminal can show desktop
# notifications using certain escape sequences such as OSC 9 or OSC 777.
desktop-notifications = true

# Modifies the color used for bold text in the terminal.
#
# This can be set to a specific color, using the same format as
# `background` or `foreground` (e.g. `#RRGGBB` but other formats
# are also supported; see the aforementioned documentation). If a
# specific color is set, this color will always be used for the default
# bold text color. It will set the rest of the bold colors to `bright`.
#
# This can also be set to `bright`, which uses the bright color palette
# for bold text. For example, if the text is red, then the bold will
# use the bright red color. The terminal palette is set with `palette`
# but can also be overridden by the terminal application itself using
# escape sequences such as OSC 4. (Since Ghostty 1.2.0, the previous
# configuration `bold-is-bright` is deprecated and replaced by this
# usage).
#
# Available since Ghostty 1.2.0.
bold-color =

# The opacity level (opposite of transparency) of the faint text. A value of
# 1 is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value.
#
# Available since Ghostty 1.2.0.
faint-opacity = 0.5

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty

# String to send when we receive `ENQ` (`0x05`) from the command that we are
# running. Defaults to an empty string if not set.
enquiry-response =

# Configures the low-level API to use for async IO, eventing, etc.
#
# Most users should leave this set to `auto`. This will automatically detect
# scenarios where APIs may not be available (for example `io_uring` on
# certain hardened kernels) and fall back to a different API. However, if
# you want to force a specific backend for any reason, you can set this
# here.
#
# Based on various benchmarks, we haven't found a statistically significant
# difference between the backends with regards to memory, CPU, or latency.
# The choice of backend is more about compatibility and features.
#
# Available options:
#
#   * `auto` - Automatically choose the best backend for the platform
#     based on available options.
#   * `epoll` - Use the `epoll` API
#   * `io_uring` - Use the `io_uring` API
#
# If the selected backend is not available on the platform, Ghostty will
# fall back to an automatically chosen backend that is available.
#
# Changing this value requires a full application restart to take effect.
#
# This is only supported on Linux, since this is the only platform
# where we have multiple options. On macOS, we always use `kqueue`.
#
# Available since: 1.2.0
async-backend = auto

# Control the auto-update functionality of Ghostty. This is only supported
# on macOS currently, since Linux builds are distributed via package
# managers that are not centrally controlled by Ghostty.
#
# Checking or downloading an update does not send any information to
# the project beyond standard network information mandated by the
# underlying protocols. To put it another way: Ghostty doesn't explicitly
# add any tracking to the update process. The update process works by
# downloading information about the latest version and comparing it
# client-side to the current version.
#
# Valid values are:
#
#  * `off` - Disable auto-updates.
#  * `check` - Check for updates and notify the user if an update is
#    available, but do not automatically download or install the update.
#  * `download` - Check for updates, automatically download the update,
#    notify the user, but do not automatically install the update.
#
# If unset, we defer to Sparkle's default behavior, which respects the
# preference stored in the standard user defaults (`defaults(1)`).
#
# Changing this value at runtime works after a small delay.
auto-update = download

# The release channel to use for auto-updates.
#
# The default value of this matches the release channel of the currently
# running Ghostty version. If you download a pre-release version of Ghostty
# then this will be set to `tip` and you will receive pre-release updates.
# If you download a stable version of Ghostty then this will be set to
# `stable` and you will receive stable updates.
#
# Valid values are:
#
#  * `stable` - Stable, tagged releases such as "1.0.0".
#  * `tip` - Pre-release versions generated from each commit to the
#    main branch. This is the version that was in use during private
#    beta testing by thousands of people. It is generally stable but
#    will likely have more bugs than the stable channel.
#
# Changing this configuration requires a full restart of
# Ghostty to take effect.
#
# This only works on macOS since only macOS has an auto-update feature.
auto-update-channel = stable
